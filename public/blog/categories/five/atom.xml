<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: five | nathan leclaire]]></title>
  <link href="http://nathanleclaire.com/blog/categories/five/atom.xml" rel="self"/>
  <link href="http://nathanleclaire.com/"/>
  <updated>2014-09-29T03:13:10+00:00</updated>
  <id>http://nathanleclaire.com/</id>
  <author>
    <name><![CDATA[Nathan LeClaire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4 Smooth AngularJS Application Tips]]></title>
    <link href="http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/"/>
    <updated>2014-01-04T14:24:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips</id>
    <content type="html"><![CDATA[<p>Anyone who follows my blog even a little closely can probably see that I &lt;3 AngularJS:</p>

<ul>
<li><a href="http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/">How to Unit Test Controllers In AngularJS Without Setting Your Hair On Fire</a></li>
<li><a href="http://nathanleclaire.com/blog/2013/12/07/dont-fear-directives-in-angular-dot-js/">Donâ€™t Fear Directives In AngularJS</a></li>
<li><a href="http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-dot-js/">Fear and Loathing With Golang and AngularJS</a></li>
</ul>


<p>As I&#8217;ve learned more about the framework, I&#8217;ve come to appreciate many of the design decisions in spite of their initial (beastly) learning curve.  For example, directives provide an absurd amount of flexibility and expressiveness in writing declarative HTML that is unmatched by jQuery-style imperative DOM twiddling.  But the learning curve on them, and other bits of Angular, is weird:</p>

<p><img src="/images/smooth-angular-tips/js-learning-curves.jpeg" title="Hearkens to the Emacs graph of yore." ></p>

<p>Some things that should be pretty straightforward, like navigating from tab to tab in single-page web applications, can be a little confusing to cough up in code <em>100% GUARANTEED TO BE CORRECT &#0153;</em>.  So here&#8217;s a blog article with some cool tips to help you out.</p>

<h1>Highlighting the active tab for the view</h1>

<p>I touched on this a little bit in my unit testing article.  In many applications (single-page ones especially) you&#8217;ll want to assign or get rid of classes on tabs or other navigation features to help the user understand where they&#8217;re navigating to or from (see Bootstrap&#8217;s <code>.active</code> class).  How do we set these conditionally in Angular when we are using partials, and the default routing solution rednering in the <code>ng-view</code> directive?  Simple.  We can use the <code>$location</code> service and declare an <code>ng-class</code> attribute that depends on the result of a simple <code>$scope</code> method.</p>

<p>In the controller:</p>

<pre><code class="js">app.controller('NavCtrl', function($scope, $location) {
    $scope.isActive = function(route) {
        return route === $location.path();
    };
});
</code></pre>

<p>In the view:</p>

<p>&#8220;`</p>

<ul class="nav navbar-nav">
    <li ng-class="{active: isActive('/profile')}">
        <a href="#/profile"><i class="fa fa-dashboard"></i> You</a>
    </li>
    <li ng-class="{active: isActive('/find')}">
        <a href="#/find"><i class="fa fa-bar-chart-o"></i> Find Friends</a>
    </li>
    <li ng-class="{active: isActive('/network')}">
        <a href="#/network"><i class="fa fa-table"></i> Network </a>
    </li>
    <li ng-class="{active: isActive('/chat')}">
        <a href="#/chat"><i class="fa fa-edit"></i> Chat Room </a>
    </li>
</ul>


<p>&#8220;`</p>

<p>Plunker demo of this concept:</p>

<iframe src="http://embed.plnkr.co/Yci9oM/preview"></iframe>


<p>Very useful and IMO, very clean.</p>

<h1>Abstracting business / data providing logic into services</h1>

<p>This is more of an architecture tip than a general solution for common problems, but with my <a href="http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/">recent article on unit testing Angular applications</a> a commenter on Hacker News pointed out that for a variety of reasons I should be putting more of my functions / code that retrieves data to be used in <code>$scope</code> by the controller into services, freeing the controller to just &#8220;glue it all together&#8221; (this also makes mocking things like AJAX calls a lot easier by avoiding <code>$httpBackend</code>).  I hadn&#8217;t really used services very much and all of the talk of factories etc., as well as a general dearth of actual examples in the official documentation on how or why to use them, left me a little bit hesitant to jump right in.  He was kind enough to provide some example code and it made things a bit more lucid for me.  Hopefully the following explanation will help to explain the use case for services as well as provide an illuminating example.</p>

<p>Let&#8217;s say that you want to keep track of some data which multiple controllers can access.  Perhaps it is weather data, preloaded into the page upon load (we&#8217;ll cover using AJAX in this case later in the article) and you need to access it in the user&#8217;s menu bar at the top of the page (to display the current temperature) as well as in a view frame for visualizing complex weather data over time.  We could attempt to jerry-rig together a solution for communicating this from controller to controller using Angular&#8217;s <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope">event system</a> or we could just chuck the aggregate data into <code>$rootScope</code>, but both of those situations are highly awkward from a standpoint of both future and present development.  The solution that Angular provides us for usecases where we need to share (possibly mutable) data between controllers, or interact with things outside of Angular-land (other than the DOM, which is what directives are used for) is to use services.  Services are singleton objects (only instantiated once) that serve as this kind of &#8220;bridge&#8221; or interface from Angular to the outside world or between different parts of your Angular application.  In case you&#8217;re unfamiliar, services are usually created using the <code>factory</code> method on your application module and injected into controllers for use like so:</p>

<pre><code class="js">app.factory('weatherService', function() {
    var weatherData = window.jsObjFromBackend.weather.data;
    return {
        // default to A2 Michigan
        state : 'MI',
        city: 'Ann Arbor',
        getTemperature : function() {
            return weatherData[this.state][this.city].temperature;
        },

        setCity : function(city) {
            this.city = city;
        },

        setState : function(state) {
            this.state = state;
        } 
    };
});
app.controller('MainCtrl', function(weatherService) {
    $scope.temperature = weatherService.getTemperature();   
});
</code></pre>

<p>You can use them in several controllers and they will save you the headache of trying to sync up data over multiple controllers.  They are also a great place to store <code>AWKWARD_CONSTANT_THAT_WOULD_OTHERWISE_BE_GLOBAL</code>.</p>

<h1>Retaining state when switching from view to view</h1>

<p>Services also can save you a potential history headache when navigating from view to view.  If you have some kind of state in one view that you want to be preserved so you can navigate to another view, then back to the original view intact (instead of re-loading the partial which is Angular&#8217;s default behavior), you will find this to be a very handy use case for a service.</p>

<p>For instance, if you wanted to keep track of where a user had scrolled in a <code>&lt;div&gt;</code> element with its <code>overflow</code> propert(y|ies) set to <code>scroll</code>, you could use a combination of a service and a directive to maintain this state.  We will keep track of where the user has scrolled in a service, and coordinate adjusting the element back to that <code>scrollTop</code> state in the <code>link</code> function of the directive (you can inject services into directives much like you inject them into controllers).</p>

<p>Our service is simple:</p>

<pre><code class="js">app.factory('rememberService', function() {
    return {
        scrollTop: undefined
    };
});
</code></pre>

<p>Our directive does a little bit more:</p>

<pre><code class="js">app.directive('scroller', function($timeout, rememberService) {
    return {
        restrict: 'A', // this gets tacked on to an existing &lt;div&gt;
        scope: {},
        link: function(scope, elm, attrs) {
            var raw = elm[0];  // get raw element object to access its scrollTop property

            elm.bind('scroll', function() {
                // remember where we are
                rememberService.scrollTop = raw.scrollTop;
            });

            // Need to wait until the digest cycle is complete to apply this property change to the element.
            $timeout(function() {
                raw.scrollTop = rememberService.scrollTop;
            });
        }
    };
});
</code></pre>

<p>We attach it to the <code>&lt;div&gt;</code> we want to affect like so:</p>

<p>&#8220;`</p>

<div class="scroll-thru-me" scroller>
 <div id="lots-of-stuff">
    &#8230;
 </div>
</div>


<p>&#8220;`</p>

<p>The element will render in the correct <code>scrollTop</code> location.  Obviously this service can be made more complex if neccesary to coordinate maintaining state in a large application.</p>

<p>The following plunker, a modified version of the first plunker on this page, demonstrates the idea.  Try navigating to tab 2, scrolling around a bit, travelling back to view 1 and then back to view 2 yet again.  As you can see, the state of where the user has scrolled to is retained.</p>

<iframe src="http://embed.plnkr.co/3ozt9s/preview"></iframe>


<h1>Making AJAX calls from services</h1>

<p>So what if you want to use Angular&#8217;s <code>$http</code> service to retrieve or set some data on the server, and interact with it from a controller?  We know by now that we should be using services to perform this kind of data-getting, but how do we deal with this asynchrony?  Doing so is not too painful, we simply return the <code>promise</code> Angular gives us when we make an AJAX call, and use the <code>then</code> method to define our callback in the controller.  A simple example:</p>

<pre><code class="js">app.factory('githubService', function($http) {
    var GITHUB_API_ENDPOINT = 'https://api.github.com';
    return {
        getUserInfo: function(username) {
            return $http.get(GITHUB_API_ENDPOINT + '/users/' + username);
        }
    }   
});  

app.controller('MainCtrl', function($scope, githubService) {
    // assuming $scope.username is set with ng-model
    githubService.getUserInfo($scope.username).then(function(data) {
        $scope.userInfo = data;
    });
});
</code></pre>

<p>But what if you want the service to take care of some more stuff (e.g. parsing the response for the desired data) for the controller so they don&#8217;t have to mess with all that business logic?  As an example, note that the response from <code>'https://api.github.com/users/nathanleclaire'</code> returns</p>

<pre><code>{
  "login": "nathanleclaire",
  "id": 1476820,
  "avatar_url": "https://gravatar.com/avatar/3dc6ac660128ff3640413d4036fed744?d=https%3A%2F%2Fidenticons.github.com%2F32974b06cb69bfa6e7331cd4a26dc033.png&amp;r=x",
  "gravatar_id": "3dc6ac660128ff3640413d4036fed744",
  "url": "https://api.github.com/users/nathanleclaire",
  "html_url": "https://github.com/nathanleclaire",
  "followers_url": "https://api.github.com/users/nathanleclaire/followers",
  "following_url": "https://api.github.com/users/nathanleclaire/following{/other_user}",
  "gists_url": "https://api.github.com/users/nathanleclaire/gists{/gist_id}",
  "starred_url": "https://api.github.com/users/nathanleclaire/starred{/owner}{/repo}",
  "subscriptions_url": "https://api.github.com/users/nathanleclaire/subscriptions",
  "organizations_url": "https://api.github.com/users/nathanleclaire/orgs",
  "repos_url": "https://api.github.com/users/nathanleclaire/repos",
  "events_url": "https://api.github.com/users/nathanleclaire/events{/privacy}",
  "received_events_url": "https://api.github.com/users/nathanleclaire/received_events",
  "type": "User",
  "site_admin": false,
  "name": "Nathan LeClaire",
  "company": "Systems In Motion",
  "blog": null,
  "location": "Ann Arbor",
  "email": null,
  "hireable": false,
  "bio": null,
  "public_repos": 18,
  "public_gists": 7,
  "followers": 12,
  "following": 9,
  "created_at": "2012-02-26T23:19:45Z",
  "updated_at": "2014-01-04T23:01:51Z"
}
</code></pre>

<p>There&#8217;s quite a bit of information here, and with more complex API calls response will be full of nested objects and arrays.  What if we just wanted to get the <code>avatar_url</code> with <code>githubService.getUserAvatarUrl(username)</code> and didn&#8217;t care about any of the other stuff?  We can use promise chaining to take care of this logic in the service.  Whatever is returned from the callback on the <code>then</code> method which has been invoked on the result of our <code>$http.get()</code> call (a promise object) will be passed to the callback function on the controller promise&#8217;s <code>then</code> method:</p>

<pre><code class="js">app.factory('githubService', function($http, $q) {
    var GITHUB_API_ENDPOINT = 'https://api.github.com';
    return {
        getUserAvatarUrl: function(username) {
            return $http.get(GITHUB_API_ENDPOINT + '/users/' + username).then(function(res) {
                // Though our return value is simple here, it could easily involve searching/parsing
                // through the response to extract some metadata, higher-order information, etc. that
                // we really shouldn't be parsing in the controller 
                return res.data.avatar_url;
            });
        }
    }   
});

app.controller('MainCtrl', function($scope, githubService) {
    // assuming $scope.username is set with ng-model
    githubService.getUserAvatarUrl($scope.username).then(function(avatarSrc) {
        $scope.avatarSrc = avatarSrc;
    });
});
</code></pre>

<p>Smooth.</p>

<p>Plunkr demo:</p>

<iframe src="http://embed.plnkr.co/e9MHuI/preview"></iframe>


<h1>Conclusion</h1>

<p>That&#8217;s all for now, folks.  Hope you&#8217;ve picked up some useful stuff along the way.  And as always, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Cool Unix Hacks For Fun and Productivity]]></title>
    <link href="http://nathanleclaire.com/blog/2013/10/27/5-cool-unix-hacks-for-fun-and-productivity/"/>
    <updated>2013-10-27T19:44:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2013/10/27/5-cool-unix-hacks-for-fun-and-productivity</id>
    <content type="html"><![CDATA[<p>In my workflow I am always looking for ways to be more productive, and to have more fun while developing.  There&#8217;s nothing quite like the feeling of flying through a sequence of commands in <code>bash</code> that you know would take your peers twice as long to execute.  Have you ever :</p>

<ul>
<li>Raged silently at a coworker for spamming the left arrow key to get to the beginning of their terminal prompt when they could have just pressed CTRL + A ?</li>
<li>Watched someone as they enter the same command over and over when they could have just prefaced it with <code>!</code> ?</li>
<li>Rolled your eyes as your buddy expounds at length on the virtues of IDEs when you know that you could &#8220;roflstomp&#8221; him or her using <code>vim</code> ?</li>
</ul>


<p>If so, then these tips might be for you.</p>

<p><em>DISCLAIMER:</em> There&#8217;s an admitted bias towards <code>vim</code>, <code>git</code>, and the terminal here.  I don&#8217;t intend to start a holy war about terminal vs. IDEs, just have some fun and point out these fun tricks that work well for me.</p>

<h1>git add -p</h1>

<p>If you&#8217;ve worked with <code>git</code> for any non-trivial amount of time you hopefully have come across the notion of making <a href="http://stackoverflow.com/questions/6543913/git-commit-best-practices">atomic commits</a>.  Essentially, the notion is that a commit should contain only interrelated details, and not anything that&#8217;s logically unrelated to the things you are committing.  For example, it makes sense to commit changes to a class and its corresponding unit test in one commit, but if you&#8217;ve made changes to another class that deal with completely different business logic then those should be in another commit.</p>

<p>However, what happens when you are working within one file that contains multiple unrelated changes, or changes that you&#8217;d like to split up into more than one commit in case you need to revert them separately?  Or you have sprinkled logging statements all over the file that you don&#8217;t want to commit to the repo?  The normal sequence of git commands that people use fails us here:</p>

<pre><code>$ git diff
diff --git a/some-file.c b/some-file.c
index f383179..09e4e35 100644
--- a/some-file.c
+++ b/some-file.c
@@ -2,6 +2,8 @@

 int main(void) {
        printf("doing some stuff\n");
-       printf("doing some more stuff\n");
+       do_some_stuff();
+       printf("doing some unrelated stuff\n");
+       do_some_unrelated_stuff();
        return 0;
 }
$ git add some-file.c
$ git commit
[master 1938906] some unrelated stuff, cramming it all in one commit 'cause I'm lazy
 1 file changed, 3 insertions(+), 1 deletion(-)
$ echo "Whoops we just committed unrelated stuff.  Not very modular of us."
</code></pre>

<p>The <code>-p</code> (standing for patch) flag for <code>git add</code> is ridiculously useful for these kinds of cases.  This tells <code>git add</code> that we want to do a <em>partial</em> add of the file, and we&#8217;re presented with a nice interative menu which allows us to specify with a lovely amount of detail exactly which parts of the file we want to stage.  <code>git</code> splits the changes into hunks automatically, which you can approve or reject with <code>y</code> or <code>n</code> respectively, or use <code>s</code> to split up into finer grained hunks.  If <code>git</code> can&#8217;t split the hunks up the way you want automatically, you can specify as much detail as you want with the <code>e</code> (edit) option.</p>

<p><img src="/images/five-tips/git-add-minus-p.jpeg" title="And now our commits are nice and tidy." ></p>

<p>See here for more details on <code>git add -p</code>: <a href="http://stackoverflow.com/questions/1085162/how-can-i-commit-only-part-of-a-file-in-git">How can I commit only part of a file in git?</a></p>

<p><em>EDIT:</em> Some commenters have pointed out that this usage of <code>-p</code> flag also works for commands such as <code>git checkout --</code>.  Therefore you could hypothetically send only part of a file back to the way it was at HEAD, and keep your other changes.  Handy!</p>

<h1>vim&#8217;s CTRL-P / CTRL-N autocomplete feature</h1>

<p>This is one of those killer features of <code>vim</code> that I am surprised to find out people (even experienced <code>vim</code> gurus) don&#8217;t use more frequently.  Even if you are a casual user (hop into <code>vim</code> to edit some config files while <code>ssh</code>ed into a box) it has the potential to help you out quite a bit.  One of the reasons people claim they couldn&#8217;t live without IDEs is the existence of features such as Intellisense that provide autocompletion of variable/function names.  These features are very nice since they cut down on mistakes due to misspelling properties and thereby speed up the compile/run/debug cycle a fair bit.  Many people don&#8217;t seem to realize that there is an analog which comes straight out of the box in <code>vim</code>, no plugins needed.</p>

<p>You can press CTRL-N to move down the list of suggested completions when typing in INSERT mode (which vim draws from the current buffers, and from the <code>tags</code> file if you have one), or CTRL-P to move back up (representing &#8220;NEXT&#8221; and &#8220;PREVIOUS&#8221; if you didn&#8217;t catch the mnemonic).  If there is only one possible completion, <code>vim</code> will just go ahead and insert it.  Very handy and speedy, especially in codebases with a lot of long variable / method / constant names.</p>

<p>CTRL-P/CTRL-N have a lot of synergy with the next tip as well, as touched upon briefly in the above paragraph.</p>

<p><img src="/images/five-tips/ctrl-n-vim.jpeg" title="And you barely need to leave the home row." ></p>

<h1>exuberant ctags</h1>

<p>Everyone who uses <code>vim</code> knows that it can be a bit of a kerfluffle sometimes to open a file in a distant directory (tab completion helps ease this with <code>:e</code>, but it&#8217;s still not usually instantaneous).  If you happen to be working on a team, or a very large project, the ability to do this quickly will likely be a vital part of your workflow.</p>

<p><a href="http://ctags.sourceforge.net/">Exuberant Ctags</a> is a tool that makes this worlds easier than it would be without.  With ctags, you can  you just run a command in the top directory of the project you&#8217;re working on to generate a &#8220;tags&#8221; file, then you can use CTRL-] to &#8220;pop into&#8221; the definition of whatever it is your cursor is over (say, a class name).  Press CTRL+T to get back to where you were before.</p>

<p>You can even set up a <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">post-commit hook in git</a> to generate your ctags file automatically when you make a commit!  Nice.</p>

<h1>CTRL-R in bash and zsh</h1>

<p>Ever been typing in a command at the terminal, when you suddenly find yourself wishing that there was an easy way to just autofill the prompt with something that you&#8217;d entered previously so you can edit it or just run it again?  If so, then I&#8217;ve got good news for you:  You can!  Just press CTRL+R and start typing the thing that you are looking for.  The terminal will fill in what it thinks you are looking for, and if there is more than one option you can cycle through them by pressing CTRL+R repeatedly.  When you&#8217;ve found the thing you&#8217;re after, you can break out of the prompt with any of the usual movement commands (CTRL+A, CTRL+E, arrow keys, etc. if you have standard <code>bash</code> keybindings).  Try it out!  Very handy if you can&#8217;t remember the name of the box you want to <code>ssh</code> into.</p>

<p><img src="/images/five-tips/ctrl-r.jpeg" title="What was that IP address again?" ></p>

<p><code>history | grep $COMMAND</code> will treat you well too, if you just want to review all of the times you&#8217;ve run that command in recent times.</p>

<h1>vim macros</h1>

<p>A lot of the time when you&#8217;re writing code, or doing related tasks, you find yourself in need of a way to repeat the same editor commands over and over, perhaps with a slight variation.  Different editors provide slightly different ways of addressing this.  <a href="http://www.sublimetext.com/">Sublime Text</a>, for example, has a &#8220;killer feature&#8221; where you are able to place multiple cursors in various locations and edit away.  In <code>vim</code> (and in <code>emacs</code> too, but here we&#8217;ll be covering the <code>vim</code> method) you record and playback keyboard macros to accomplish this.  It is a tool with an absurd amount of power and flexibility, and offers the chance to speed up productivity on repetitive editing tasks by an order of magnitude.</p>

<p>To make a macro, press <code>q</code> in normal mode, then press another key to &#8220;name&#8221; the macro (usually I use <code>q</code> again).  <code>vim</code> will start recording your keystrokes.  <code>vim</code> will remember which keystrokes you make until you press <code>q</code> again to save the macro.  You can replay with <code>@</code>-letter in normal mode, so I am usually pressing <code>@q</code>.  You can also preface the <code>@</code>/replay command with a number so that you can rapidly execute your macro over and over (like much in <code>vim</code>-land, the &#8220;grammar&#8221; behaves as you would be accustomed to).  If you&#8217;re accustomed to using <code>vim</code>&#8217;s fancy movement commands (for instance, using <code>/</code> search to navigate), and practice a little bit, you will soon be able to whip up thunderous macros that will leave your mouse-dependent colleagues in the dust.</p>

<p><img src="/images/five-tips/vim-macros.gif" title="Who needs multiple cursors?" ></p>

<p>For more info on <code>vim</code> macros, see here: <a href="http://vim.wikia.com/wiki/Macros">Vim Wiki (Macros)</a></p>

<p>That&#8217;s all for now, folks.  Hope you enjoyed and I&#8217;ll see you next week!</p>
]]></content>
  </entry>
  
</feed>
