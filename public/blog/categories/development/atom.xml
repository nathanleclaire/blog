<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | nathan leclaire]]></title>
  <link href="http://nathanleclaire.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://nathanleclaire.com/"/>
  <updated>2014-09-29T03:13:10+00:00</updated>
  <id>http://nathanleclaire.com/</id>
  <author>
    <name><![CDATA[Nathan LeClaire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Number One Dev Killer]]></title>
    <link href="http://nathanleclaire.com/blog/2014/02/08/the-number-one-dev-killer/"/>
    <updated>2014-02-08T15:29:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/02/08/the-number-one-dev-killer</id>
    <content type="html"><![CDATA[<p><img src="/images/dev-killer/rage.gif" title="One of those days?" ></p>

<p>I frequently find myself fascinated by modern technology.  I mean, we went from computers that are the size of buildings to computers of equivalent power that fit in your pocket in ~50 years (I&#8217;ll leave you to decide if it&#8217;s sad or not that we use them mostly to look at pictures of cats and argue on the Internet).  A pretty impressive feat if you ask me, especially considering that 50 years is just about nothing in geographic terms.</p>

<p>What always fascinates me the most, however, is people and how they interact with (and create!!) new technology.  Especially being immersed in developer culture, I&#8217;ve start to see the same patterns over and over again and begun learning what makes some projects (especially when people are working in isolation) fail to get traction, and what makes some projects so wildly successful.  So today I&#8217;m going to write about a story to demonstrate a point about the thing which is, in my opinion, a huge killer of developer productivity.</p>

<h1>A Story About Mailing Lists</h1>

<p>Do you recognize this guy?</p>

<p><img src="/images/dev-killer/mailchimp.jpg"></p>

<p>Probably at least looks familiar, right?  It&#8217;s the <a href="http://mailchimp.com">MailChimp</a> monkey.  How about this guy?</p>

<p><img src="/images/dev-killer/hermes.jpg"></p>

<p>It&#8217;s <a href="http://en.wikipedia.org/Hermes">Hermes</a>, the Greek god of communication.  But unless you&#8217;re a theology buff, Freddie the MailChimp mascot was probably a lot more meaningful to you in a modern context than Hermes.  So what?  Let me tell you a story to explain what I&#8217;ll be getting at.</p>

<p>Now that I&#8217;ve started getting some traffic to my blog, and received a variety of emails from readers, I wanted to get a mailing list up.  You know, nothing fancy, just an email that I send out every once in a while to give people a chance to catch up with what I&#8217;ve been writing about this week.  So what do I do?</p>

<p>I could use <a href="http://mailchimp.com">MailChimp</a>, a rock-solid and proven standby that is good enough for people like <a href="http://andrewchen.co">Andrew Chen</a> and <a href="http://www.kalzumeus.com">Patrick McKenzie</a> and obviously should be good enough for me.  But what did I do?  Like a &#8220;good&#8221; hacker, I started writing my own (In addition to just wanting a cool project, for some reason I was embarassed about the possibility of people know that I use MailChimp.  I don&#8217;t know why, I guess I just have some kind of weird DIY fetish).  It was going to be called <a href="http://github.com/nathanleclaire/hermes">Hermes</a>, written in Express/Node.js, and I was totally stoked.  Mostly because now I was going to attempt to re-invent MailChimp instead of doing more important, but less sexy, things with my time.</p>

<p>I got about this far (I&#8217;m skipping over some boilerplate):</p>

<pre><code class="javascript">function sendSingleMail(subject, to) {
    getSignupEmailTemplate({
        to: to
    }, function(html) {
        mailgun.sendRaw("Nathan LeClaire &lt;nathan.leclaire@gmail.com&gt;", [to.email],
            'From: nathan.leclaire@gmail.com' +
            '\nTo: ' + to.email +
            '\nContent-Type: text/html; charset=utf-8' +
            '\nSubject: ' + subject + '\n\n' +
            html,
            function(err) {
                if (err) console.log("there was an email error", err);
                else console.log("successfully sent email to " + to.email);
            }
        );
    });
}

function getSignupEmailTemplate(context, callback) {
    var tmpl = jade.renderFile("views/signup-email.jade", context, function(err, html) {
        if (err) {
            console.log("error rendering jade template");
        } else {
            callback(html);
        }
    });
}

function main(conn) {
    var subscribers = r.db("hermes").table("subscriber");
    app.post("/email_signup", function(req, res) {
        var email = req.body.email;
        subscribers.insert({
            email: email,
            name: "",
            subscriptionConfirmed: false
        }).run(conn, function(err, result) {
            if (err) {
                console.log("[ERROR] failed to insert email from someone... ", err);
                res.json({
                    success: false
                });
            } else {
                sendSingleMail("Hi! I hear you'd like to subscribe to my blog.", {
                    email: email
                });
                res.json({
                    success: true
                });
            }
        });
    });

    app.listen(3001);
}
</code></pre>

<p>Before I started to say to myself: &#8220;Nate, are you being reasonable or are you just being cheap?  And why are you doing this instead of working on other, more low-hanging fruit to make your blog and side-projects more successful?  <a href="http://github.com/nathanleclaire/checkforbrokenlinks">Check For Broken Links</a> <em>still</em> hasn&#8217;t ever been deployed!&#8221;<sup id="foot1return"><a href="#foot1">1</a></sup>.  Though the Check For Broken Links comment was a low blow, I knew I was right.</p>

<h1>Enlightenment</h1>

<p>So I bit the bullet and used MailChimp instead.  You can see the results of my &#8220;labor&#8221; in the left sidebar of my blog, and I&#8217;m actually ecstatic I decided to go with them instead of writing my own mail management system.</p>

<p>Why?  Because all of the time I saved by going the MailChimp route, instead of creating something original but inferior, allowed me to spend more time doing other, more valuable things.  For that matter, the influx of reader emails that I was anticipating and hoping for hasn&#8217;t really materialized, and at the time of writing I have all of two people on my mailing list :D (myself and my girlfriend- though I&#8217;m working on improving this).  I&#8217;m glad to have one less (giant) thing on my todo list, and I don&#8217;t feel like a failure since I didn&#8217;t waste a bunch of time on something that isn&#8217;t paying dividends right away (though I think it will in the future).  And I get all of the niceness, including analytics and a crazy awesome Web UI, for the small price of a MailChimp logo on my signup form.  Sign me up!</p>

<p>Coming back to the Freddie the Chimp vs. Hermes comparison- Why use an untrusted brand / sketchy open source product when you can use a battle-hardened old friend?</p>

<p>The point that I&#8217;m getting at, if you haven&#8217;t guessed it already, is that developers (as I did in this case) oftentimes get their potential productivity murdered, hard, by <a href="http://en.wikipedia.org/wiki/Not_invented_here">Not Invented Here Syndrome</a>.  Who among us has met the stubbornly anti-framework programmers that always insist they could do a better job themselves, even with the absurd wealth of (oftentimes free) tools available for development nowadays?  How many client-side JavaScript MV* frameworks exist because their creators weren&#8217;t satisfied with simply improving existing solutions?  I know it&#8217;s an easy target, but allow me to list a few:</p>

<ul>
<li><a href="http://angularjs.org">Angular</a></li>
<li><a href="http://backbonejs.org">Backbone</a></li>
<li><a href="http://meteor.com/">Meteor</a></li>
<li><a href="http://facebook.github.io/react/">React</a></li>
<li><a href="http://twitter.github.io/flight/">Flight</a></li>
<li><a href="http://fahad19.github.com/singool/">Singool.js</a></li>
<li><a href="http://knockoutjs.com/">Knockout</a></li>
<li><a href="http://sammyjs.org/">Sammy.js</a></li>
<li><a href="http://emberjs.com/">Ember.js</a></li>
<li><a href="https://github.com/petermichaux/maria">Maria</a></li>
<li><a href="http://terrifically.org/composer/">Terrific Composer</a></li>
<li><a href="http://rivetsjs.com/">Rivets.js</a></li>
<li><a href="http://bruth.github.com/synapse/docs/">Synapse</a></li>
<li><a href="http://www.ractivejs.org/">Ractive</a></li>
</ul>


<p><img src="/images/dev-killer/incredulous.gif"></p>

<p>Yeah.</p>

<p>Though he is speaking to a slightly different context, I feel that Keith Perhac breaks the issue down nicely in this <a href="http://www.kalzumeus.com/2012/05/18/kalzumeus-podcast-ep-2-with-amy-hoy-pricing-products-and-passion/">Kalzumeus Software Podcast</a>:</p>

<blockquote><p>And really, I think there’s also a… so, this is not just the Hacker News crowd, this is not just the Slashdot crowd, this is not just the techie crowd, there are a lot of people. I think the naysayers are the people who have more time than money, is honestly what it comes down to.</p>

<p>Because, honestly, if I had a ton of time, if I was working a nine-to-five job, had a set number of hours a day I worked at a fixed income, at that, and I needed time-tracking software, I would probably write my own on the weekend because I have more time than I have money at that point.</p>

<p>For someone who’s trying to run or start their own business, they suddenly have more money than they have time. Not that they’re making tons of money but because their time is much more valuable because there are so many other things they could be doing.</p></blockquote>

<p>This seems to be the gospel truth right here.  People can and should be focusing less on reinventing the wheel, and more on their core value proposition.</p>

<p>Note that I&#8217;m mostly talking about things in the context of individual developers working by themselves, or in coordination with fairly small teams, not in large cutting-edge organizations such as the type discussed in <a href="http://www.joelonsoftware.com/articles/fog0000000007.html">this article by Joel Spolsky</a>, where he makes an argument in favor of &#8220;Not Invented Here Syndrome&#8221;.  I agree with many of the points he makes here (no off-the-shelf web server will ever be as crazy fast as Google&#8217;s and that&#8217;s their business advantage), but I also feel like making an argument in favor of NIH is kind of dangerous.  Not that Joel has an obligation to look out for everyone&#8217;s best interests or anything, but I&#8217;d be shocked if he&#8217;d never come across a business situation where a company was investing waaaay too many resources into reinventing the wheel when they could have just bit the bullet.  This is, after all, the man who invented Wasabi, a specialized dialect of Visual Basic roasted hilariously in this post by his <a href="http://www.codinghorror.com/blog/2006/09/has-joel-spolsky-jumped-the-shark.html">future business partner Jeff Atwood</a>:</p>

<blockquote><p>FogBugz is written in Wasabi, a very advanced, functional-programming dialect of Basic with closures and lambdas and Rails-like active records that can be compiled down to VBScript, JavaScript, PHP4 or PHP5. Wasabi is a private, in-house language written by one of our best developers that is optimized specifically for developing FogBugz; the Wasabi compiler itself is written in C#.</p></blockquote>

<p>It may have worked for Fog Creek, but a lot of weird technical decisions have ended up working out for people (like <a href="http://www.hhvm.com/blog/">transpiling PHP to C++</a>).  Would you want to maintain <em>that</em> codebase?</p>

<h1>The Flipside</h1>

<p>The flipside of this, of course, is equally poisionous, and I am going to describe a type of person that you and I both know to illustrate this point.  I think if you are involved in the technology community pretty heavily you will perhaps find this person eerily familiar.</p>

<p>This type of person is passionate about technology.  In fact, they are so passionate about it that they become convinced that it is a panacea for every problem they might possibly encounter.  They put more importance on theoretical wanking and &#8220;purity&#8221; than on execution and delivery, and they jump from framework to framework without ever putting in any actual mental elbow grease.  They are a perennial &#8220;Hello Worlder&#8221;, always chasing after the hot new thing.</p>

<p>They probably mock the PHP or Rails programmers who are too busy getting stuff done to hear or care.  They may have a passion for exploration and learning, which is good, but they lack wisdom and insight.  Often this can be the same kind of person who may be interested in starting their own company, but lacks the practical depth to find something that has good product/market fit.  Instead they may try to solve problems that nobody has, or let the technology choice dictate the business direction instead of the other way around.</p>

<p>I have been this person on and off.  It&#8217;s no more fun them than it is to be around them.  I think one should shy away from being this guy, as much as one should shy away from being a NIHSer.  In my opinion, you should keep an open mind about things and not let your ego get in the way of being a developer who&#8217;s genuinely enjoyable to be on a team with.  Spoiler alert:  you are not right 100% of the time.</p>

<h1>Conclusion</h1>

<p>Go forth and hack, sisters and brothers.  Just put some thought into using the right tool for the right job, and getting things done FAST instead of learning the newest hotness (which may cause you more headaches than it prevents).  There&#8217;s nothing wrong with a box running MySQL as its only database, or using just jQuery on your front end if that&#8217;s all you need, or developing an iOS app instead of an HTML5 one written with PhoneGap and AngularJS.  Let the tool fit the situation, and get things done (especially if you&#8217;re starting a company).</p>

<p>Until next week, stay sassy Internet!  Oh, and subscribe to my mailing list already.  You&#8217;re killing me over here.</p>

<ul>
<li>Nathan</li>
</ul>


<p><span id="foot1"><a href="#foot1return">(1)</a></span> : It&#8217;s kind of like my &#8221;<a href="http://en.wikipedia.org/wiki/Chinese_Democracy">Chinese Democracy</a>&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Node.js The Troll Way]]></title>
    <link href="http://nathanleclaire.com/blog/2013/02/06/learn-node-dot-js-the-troll-way/"/>
    <updated>2013-02-06T20:31:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2013/02/06/learn-node-dot-js-the-troll-way</id>
    <content type="html"><![CDATA[<h2>Server Side JavaScript</h2>

<p>As many of you are probably aware, <a href="http://nodejs.org/">Node.js</a> is all the rage with the kids these days.  It&#8217;s so popular that users even have the nerve to <a href="http://code.google.com/p/v8/issues/detail?id=847#c15">gall Google developers</a>, insisting that the V8 JavaScript engine is important for things outside of mere Chrome.  Node has rapidly been evolving and maturing into the new hotness of the web development community.  Its core is driven by the idea of asynchronous input and output,
a way to manage the latency inherent in developing applications for the web.  With Node, you gain the ability to write JavaScript which runs on the server-side of an application- and the somewhat eyebrow-raising ability to create a server within JavaScript itself.</p>

<p>Throw in a sweet package manager for every sort of JS voodoo you can imagine (<a href="https://npmjs.org/">npm</a>), and you&#8217;ve suddenly opened up the door to a whole new world of handy tools and tricks, accessible to many developers due to the ubiquitous nature of JavaScript on the modern web.  The V8 JavaScript engine on which it is based is has performed pretty well for a web-based language in <a href="http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php">benchmarks</a>.  We all know that benchmarks are even worse dirty lies than statistics, so what I personally think is really cool about Node is that it mandates one to approach concurrency with a direct focus from the start of application development.  Surely there&#8217;s a lot to be said for not having to rip off and reinvent the wheel of horizontal scalability.  But I digress.</p>

<h2>Screen Scraping With Node.js</h2>

<p><img src="/images/skyrim-guard.jpeg" title="Go cast your fancy JavaScript somewhere else!" ></p>

<p>The purpose of this article is to give a quick flyby example, in which I will be demonstrating Node.js by constructing a screen-scraping bot to troll my brother on Reddit.  I had an idea to build an application which uses the Reddit API, to spam my brother&#8217;s account with Skyrim quotes/dialogue in comments for entertainment purposes.  If he ever were to reply, bewildered, my bot would ping back: <em>&#8220;Problem, theonewhoquestions?&#8221;</em></p>

<p>Naturally, in order to do this, I needed to gather the Skyrim intel (quotes) first.  Originally I set out to write the crawler in Python as I have some experience with the venerable <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> Module.  But I was already using Node a bit as a result of Twitter&#8217;s Bootstrap framework, and I was curious to challenge myself to actually build something with it for fun and comprehensive learning.  So, I decided to investigate.</p>

<p>Turns out there are a few modules that come in handy for a task like this in Node.
<code>javascript
    var jsdom = require('jsdom');
</code>
This is the idiomatic way to import modules in Node.  The jsdom module for Node enables us to simulate a DOM environment which many of us familiar with (working with client side code) for use in our Node script.  And naturally, it&#8217;s as easy as one, two, callback!</p>

<p>Since I am familiar with using jQuery to parse the DOM, I opted to use it to extract the quotes from <a href="http://www.uesp.net/wiki/Skyrim:Guard">this website</a>, where they are contained within table cells ripe for the picking.  To do this with the jsdom module, you call the <code>jsdom.env</code> method.  As arguments we pass in the address of the HTML we wish to parse.
&#8220;` javascript
    jsdom.env(&#8216;http://www.uesp.net/wiki/Skyrim:Guard&#8217;,
      [ &#8216;http://code.jquery.com/jquery.min.js&#8217; ],
      function(errors, window) {
        var $ = window.$;
        $ = stripTags($);</p>

<pre><code>    var $skyrim_quotes = $('tr td').filter( function(element, index, array) {
        if ( $(index).html().match(/^".*"$/) ) {
          return true;
        } else {
          return false;
        }
    });

    $skyrim_quotes.each( function() {
      var $scopedElem = $(this);
      var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();

      console.log( content );

    }); 
  });
</code></pre>

<pre><code>There's a lot going on here that merits explanation, so I will take a second to break down in more detail what is going on in this chunk of code.  We have an instance of the `jsdom` object so we can call the `env` method to bootstrap up a DOM to parse.  The first argument to this method (`'http://www.uesp.net/wiki/Skyrim:Guard'`) is the URL to query for the HTML to instantiate this DOM with.  You can also just pass in plain old HTML as a string if you happen to have some of that laying around in dire need of parsing.

The second argument to the `env` method is a list of scripts to be included in the virtual window (DOM).
</code></pre>

<pre><code>[ 'http://code.jquery.com/jquery.min.js' ],
</code></pre>

<pre><code>In this instance and many of the examples given on the `jsdom` [Github page](https://github.com/tmpvar/jsdom), we include the jQuery library.  If one wanted to use Mootools or Underscore.js, I imagine that is also totally doable, although I have no anecdotal evidence to support this hypothesis.  For my purposes, jQuery was a comfortable and effective fit.

The *third* argument to the `jsdom.env` method, and arguably the most critical, is a callback function to be executed once the response has been received from the server (or immediately, in the case of passing in your own HTML).  
</code></pre>

<pre><code>  function(errors, window) {
    // ...
  }
</code></pre>

<pre><code>It takes two arguments:  The first is called `errors` and is an list of errors which you can inspect if something in the `env` method goes wonky (in the code I've presented here `errors` is ignored, although you still need to have it in the definition of your callback function).  The second is called `window` and it is the coup de grâce of what we are seeking: a bootstrapped, "invisible" DOM that our script can parse.

It's worth pausing for a second here to think about why the "Node way" results in what may seem to some people to result in an expansive sea of callback spaghetti (if JavaScript didn't already appear to you to be an expansive sea of said callback spaghetti).  Any time that Node encounters a situation which otherwise might block the execution of code (such as an HTTP GET request to an external service), it simply defines a callback function to be executed when that *event* occurs (i.e. when your GET request is finished).  

But onward to the trolling we must progress!  The very first thing I do in this brave new callback where we will be doing our DOM parsing is define a few variables.
</code></pre>

<pre><code>var $ = window.$;
$ = stripTags($);
</code></pre>

<pre><code>`jsdom` allows access to the jQuery object through the `window` object, and as I would be accessing it often enough to justify a shorthand method of access, that is what `var $ = window.$;` is all about.  So what's with that `stripTags` call?  Well, the values that I was after were plain text without any HTML inside, as said HTML in a Reddit comment might shatter the illusion that it could be a person typing said Skyrim quotes instead of a robot.  So, for example, some of the entries in the table cells have words *in italics* and I needed to get rid of these tags.  Ergo, my `stripTags` function.
</code></pre>

<pre><code>/* consumes jQuery object
   returns jQuery object */

function stripTags($) {

  // Cleaning out anchor tags, italics, and one span which is a warning not
  // to edit for nice, readable quotes

  $('tr td a').contents().unwrap();
  $('tr td i').contents().unwrap();
  $('span').contents().unwrap();
  $('small').contents().unwrap();

  return $;
}
</code></pre>

<p><code>``
Using</code>unwrap()` on client-side code willy-nilly like this would more likely than not b0rk some critical piece of functionality in your app, but I only care about the data that I am scraping so it&#8217;s not really relevant here.  It gets the job done, which is to turn quotes which in their raw form look like</p>

<blockquote>&#8220;You here to see the &lt;a href=&#8221;http://nathanleclaire.com/wiki/Skyrim:Igmund&#8221; title=&#8221;Skyrim:Igmund&#8221;&gt;Jarl&lt;/a&gt;? No sudden moves, understand?&#8221;</blockquote>


<p>into a nice clean version that looks like this:</p>

<blockquote>&#8220;You here to see the Jarl? No sudden moves, understand?&#8221;</blockquote>


<p>Thanks to that <code>$('tr td a').contents().unwrap();</code> statement.  It&#8217;s a little bit of extra work, but trolling is serious business, and well worth the investment.  And as I said before, applying these operations globally to the DOM on a large-scale project would be overkill, but for my purposes here it was grand.</p>

<p>The next step was the find the quotes themselves.  A simple little <code>$('tr td')</code> yielded very good results, mostly what I was looking for, but there happened to be a bit of extra flotsam and jetsam table cells which contained content I was not after at all.  So I needed some way to differentiate the Skyrim quotes from anything else that happened to be in a table cell which was not relevant to the task at hand.  Hm, surely I can come up with a regular expression to help with that?
<code>javascript
    var $skyrim_quotes = $('tr td').filter( function(element, index, array) {
        if ( $(index).html().match(/^".*"$/) ) {
          return true;
        } else {
          return false;
        }
    });
</code>
Here we have the lovely jQuery method <code>filter</code> being used to apply the simple regexp pattern <code>/^".*"$/</code> to our selection and returning only the elements that match.  This knocks out everything which does not adhere strictly to the &#8220;quote&#8221; pattern (string&#8217;s first and last character are a double quote - <code>"</code>).</p>

<p>Almost there now- still I needed to strip some HTML special characters such as <code>&amp;lt;</code> and <code>&amp;gt;</code> to get them especially clean.  And, of course, to strip the double quotes for aesthetic purposes.  I decided to bring a gun to a knife fight and add methods to <code>String</code>&#8217;s prototype.
&#8220;` javascript
    String.prototype.stripHTMLSpecialChars = function () {
      // There&#8217;s a few quirks in the soup
      var str = this.replace(/&lt;/, &#8221;);
      str = str.replace(/&gt;/, &#8221;);
      str = str.replace(/&nbsp;[sic]/, &#8216;y&#8217;);
      return str;
    };</p>

<pre><code>String.prototype.stripDoubleQuotes = function() {
  return this.slice(1, this.length - 1);
};
</code></pre>

<pre><code>The solution for `stripDoubleQuotes()` feels a little bit kludgey, so I'd be curious to hear if anyone else has a better idea (I'm sure JavaScript is capable of sed-like string manipulation antics but this was this quickest way I could think of accomplishing the goal).  `stripHTMLSpecialChars()`'s removal of these "quirks" was based on a quick grepping of the results I was getting back to see what HTML special characters were being returned.  Used in the `jsdom` callback, our "sanitizing" and printing to the console of these quotes looks like this:
</code></pre>

<pre><code>$skyrim_quotes.each( function() {
  var $scopedElem = $(this);
  var content = $scopedElem.html().stripHTMLSpecialChars().stripDoubleQuotes();
  console.log(content);
}
</code></pre>

<p><code>``
Bravo!  Now we have our hot, fresh, Skyrim quotes, eager to troll unsuspecting brothers with.  I opted to stash these quotes in a database (sqlite3) so I didn't have to ping the Skyrim wiki's servers every time they were needed (and also to keep track of which ones had been used already).  I won't go into a lot of gory details here about how working with a database in Node.js is, but suffice it to say for my purposes it was actually fairly straightforward.  Node has a handy</code>sqlite3` module that made working with the database fairly simple.  As it turns out, JavaScript being single-threaded-async is quite handy for tasks like this because the thread isn&#8217;t going to block on the expensive IO operations.  If you want to pick on PHP, for instance, just note how long it takes a PHP application to make, say, 25 requests to external servers versus Node&#8217;s same attempt with concurrency.</p>

<p>Stay tuned for the followup where I create the actual robot to talk to my brother, and if you&#8217;re keen feel free to <a href="https://github.com/nathanleclaire/learnnodethetrollway">check out the source</a> on Github.</p>
]]></content>
  </entry>
  
</feed>
