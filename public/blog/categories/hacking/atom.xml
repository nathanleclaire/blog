<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | nathan leclaire]]></title>
  <link href="http://nathanleclaire.com/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://nathanleclaire.com/"/>
  <updated>2014-09-29T03:13:10+00:00</updated>
  <id>http://nathanleclaire.com/</id>
  <author>
    <name><![CDATA[Nathan LeClaire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Reasons We Won Startup Weekend]]></title>
    <link href="http://nathanleclaire.com/blog/2014/02/10/5-reasons-we-won-startup-weekend/"/>
    <updated>2014-02-10T18:27:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/02/10/5-reasons-we-won-startup-weekend</id>
    <content type="html"><![CDATA[<p>This previous weekend I participated in <a href="http://annarbor.startupweekend.org/">Ann Arbor Startup Weekend</a> and had a blast.  Our company&#8217;s name is <a href="http://fixworthy.co">Fixworthy</a> and we built a photo-based bug tracking app for real life (think Github Issues meets Instagram).</p>

<p><img src="/images/swaa/fixworthy.jpeg" title="Hail to the victors." ></p>

<p>Of course we worked hard on it, lost some sleep etc. but everyone does that.  There were some special factors at play in our case that helped us win such as:</p>

<ol>
<li><a href="http://www.vagrantup.com/">Vagrant</a> and Frequent Deploying</li>
<li>Emphasizing &#8220;Done Is Better Than Perfect&#8221;</li>
<li>Good Design and Aesthetics</li>
<li>Finding a Use For Everybody (especially developers)</li>
<li>Following the Pain and the Money</li>
</ol>


<p>Of course, all of these are forces stem from having a smart, talented, and easy-to-work-with team as well.  Let&#8217;s get into some specifics, shall we?</p>

<h1>Vagrant and Frequent Deploying</h1>

<p><img src="/images/swaa/vagrant.png" title="Up up and away." ></p>

<p>I&#8217;m going to start off with a technical point to hook in my fellow nerds here.</p>

<p>The very first technical thing that we (the developers) did, on Friday night after working our way through the vision of the product and what we thought its most important features should be, was to get started hacking.  We knew that to ship a working product quickly it would be an enourmous boon to be:</p>

<ol>
<li>Working on the same platform so that any issues which came up would have ubiquitous solutions, <em>and</em>:</li>
<li>Working in an environment that was extremely close to the environment we would be deploying our production solution to (ever have those awkward it-worked-on-my-machine production bugs?)</li>
</ol>


<p>Most companies account for this by having everyone work in the cloud on EC2 instances or what have you, or simply by forcing their developers to all use the same operating system (which we kind of did a variant of).  In our case there was no way developing in the cloud was going to work (we had too little time or money) and our dev team was split about 50/50 between OSX and Windows so we decided to use <a href="http://www.vagrantup.com/">Vagrant</a>, a &#8220;free and open-source software for creating and configuring virtual development environments&#8221;.</p>

<p>Vagrant is awesome, although I&#8217;m a little disappointed they have moved away from their original logo which features this scrappy dude:</p>

<p><img src="/images/swaa/vagrant_chilling.png"></p>

<p>We made everyone download and install Vagrant / VirtualBox (which Vagrant depends on) and use <a href="https://github.com/bryannielsen/Laravel4-Vagrant">this configuration</a>, which orchestrates the installation of a LAMP stack and the <a href="http://laravel.com/">Laravel framework</a> using Puppet.  It took a little while for all of the dependencies to install on everyone&#8217;s computer but we were able to sit back and sip a little beer while Puppet did most of the heavy lifting.  Once Puppet was all done, everyone could point their host OS&#8217;s browser to <code>http://localhost:8888</code> and be greeted by a freshly minted Laravel install.  Shared folders allowed us all to get started hacking right away, which was seriously awesome for productivity.</p>

<p>This system also made it super easy to deploy frequently, since we just pulled in our changes to a git repo hosted on the prod server, ran the migrations and database seeds and <em>voila</em>, we were done deploying.  No nasty production surprises.</p>

<p>One last point here, on the geeky technical side of things:  There was no squabbling over PHP vs. Rails or CodeIgniter vs. CakePHP or any of that kind of stuff that you are surely familiar with, we simply all worked towards the common good however we could.  We had a couple of guys who traditionally stuck to Ruby or .NET, for instance, that picked up front-end work since it was where the could be the most productive, the quickest.  This kind of put-the-team-first mentality is priceless for getting things done quickly.</p>

<h1>Emphasizing &#8220;Done Is Better Than Perfect&#8221;</h1>

<p><img src="/images/swaa/done_is_better.png" title="Lookin&#8217; good." ></p>

<p>We&#8217;ve all probably heard this one <a href="http://www.etsy.com/blog/en/2013/why-done-is-better-than-perfect/">a ton of times</a>, so I won&#8217;t spend <em>too</em> much time on it, but I do believe it played a huge role in our ability to push forward as a team and succeed.  Especially on front-end stuff I have way too much of a tendency towards &#8220;perfectionism&#8221; that can be counterproductive at best and harmful at worst as I am stricken by analysis paralysis and self-doubt.</p>

<p>Whenever we had moments of self-doubt about the product, or our implementation (though these were surprisingly rare on the tech side) we asked ourselves: &#8220;Is this helping us to deliver a quality product that is aligned with our vision for what this should be?&#8221; and if the answer was no, we stoically carried onward.  There were definitely parts of the app that left something to be desired (security concerns are a notable one on the backend side- though hopefully the framework helps a bit with that), but there always are, and for a weekend project I was ecstatically happy with the end result.</p>

<p>I was shocked how quickly we could ship something that was working, if not ideal, and begin validating it with users and prospective clients.  That creates a tight feedback loop and gets the commits a-flyin&#8217;.</p>

<h1>Good Design and Aesthetics</h1>

<p><img src="/images/swaa/fw_logo.png" title="Lookin&#8217; good." ></p>

<p>Did you know that users begin forming impressions of a website&#8217;s &#8220;visual appeal&#8221; in <a href="http://www.websiteoptimization.com/speed/tweak/blink/">as little as 50 milliseconds</a>?  That&#8217;s 50 milliseconds quicker than the <a href="http://stackoverflow.com/questions/536300/what-is-the-shortest-perceivable-application-response-delay">minimum application response delay humans are able to perceive</a>.  In other words, users decide if your website is beautiful or if it is garbage very, <em>very</em>, quickly.</p>

<p><a href="http://www.klsy.co/">Kelsey</a> was our design ringer and boy am I ever glad she was on our team.  There&#8217;s no doubt that <a href="http://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words">a picture is worth a thousand words</a> and having a designer allowed us to take our website from &#8220;awkward-Bootstrap-import-and-fuhgettaboutit&#8221; to &#8220;clean, lean, eye-candy <em>machine</em>&#8221;.  A logo is a condensed visual statement-of-purpose-of-sorts and I was super happy with the logo designed for Fixworthy, which you can see above (I&#8217;m a little biased because my favorite color is orange).</p>

<p>Having good design instantly improves your social media presence (check that backdrop on our <a href="twitter.com/fixworthy">Twitter page</a>!), the initial reaction that your users have as they begin forming a relationship with your product, and more.  It&#8217;s well known that <a href="http://econsultancy.com/blog/62391-do-bigger-images-mean-improved-conversion-rates-three-case-studies">big images increase conversion rates</a>, and having those design chops on our side really gave us some serious momentum on our side towards converting the people who really needed to be swayed in this case- the judges.</p>

<h1>Finding a Use For Everybody (especially developers)</h1>

<p><img src="/images/swaa/steve_ballmer_is_awesome.gif" title="This man knows." ></p>

<p>When some of the hopefuls pitched their ideas or were trying to sell them to get people to join their team, there were a few who stood on stage and said in all honesty &#8220;I&#8217;m not looking for any other developers to join&#8221; while all the devs in the room&#8217;s collective jaws dropped.  Our feelings of surprise were validated late on Saturday when about three or four companies went up to the mic again to try and persuade developers already engaged with one team to switch to their own.</p>

<p>In a sense I can see how a technical founder might not want to run the risk of having a bunch of newbies or bad programmers stomping around in their precious self-written code, but at the same time it stunned me that anyone would turn away someone willing to help with such a short deadline in tow (especially with how tight the demand is for technical talent).  The odds of getting a real stinker in your group were pretty low, considering that it was a University of Michigan-centric event, and it struck me more as vanity than anything else that people were willing to turn away perfectly good (free!) talent.</p>

<p>Our company didn&#8217;t turn anyone away and tried to find a use for everyone.  As mentioned, some of the developers were a little more comfortable with back-end stacks other than LAMP, and so they cordially agreed to work on the front-end.  Our team member <a href="http://wilsonproductive.com/">Greg</a> felt that he was best at social media / marketing stuff, so he whipped up an Instagram and Twitter presence at lightning speed.  Our business team began pounding the pavement by doing market research, performing user testing, and getting in touch with potential customers (organizations for whom this technology would be useful, perhaps if they wanted private issue tracking).</p>

<p>All in all, we made a hugely concentrated effort to rake in as much value as possible from every single person who wanted to help.  This helped bolster everyone&#8217;s moral and enthusiasm, let them play to their strengths, and paid off for us as a team.</p>

<h1>Following the Pain and the Money</h1>

<p><img src="/images/swaa/mo_money_mo_problems.jpeg"></p>

<p>This is still a major pivot/focus point for the startup if we continue going (and there&#8217;s a lot of wind in our sails right now), but I think that a large part of why the group was able to be successful was that we didn&#8217;t kid ourselves about the fact that we were building something to create wealth by:</p>

<ol>
<li>Easing pain points for people, especially those with cash to throw at the problem e.g. businesses and universities</li>
<li>Making money.</li>
</ol>


<p>Granted, there was a lot of hand-wringing about <em>how</em> we were going to accomplish this, but I think several of the core engineers (particularly <a href="http://scottdlowe.com/">Scott</a>) had a vision about this product was going to fly, and didn&#8217;t let a relentless enthusiasm for making a fantastically great product interfere with the reality that we needed to make money from this somehow.  A favorite line to throw at our business team, when they would try to persuade us to take the product in a different direction, was &#8220;get us someone who will write us a check for the V1 of this app when it is finished&#8221;.  That really put things into perspective.  Shouldn&#8217;t every aspiring entrepreneur hear, &#8220;Yeah, but who&#8217;s going to use (and pay for) that?&#8221; in response to one of their ideas?</p>

<p>This kind of zeal prevented us from making yet another recipe app or a product with questionable monetization potential.  I feel confident that at the very least the core Fixworthy product could make moves into a space where they were making life easier for powerful (read: those with budgets to spend on sotware) people&#8217;s lifes a bit easier, and especially given the generally low standard for UI on enterprise software I&#8217;m optimistic about the opportunities in that market for easy-to-use products that are marketed well.</p>

<h1>Conclusion</h1>

<p>I had a blast and learned a ton about technology and leading / working with a decent sized team.  We started the weekend with nothing and ended up with a company, however small and scrappy it was.  Best of all, we won.  <a href="http://www.youtube.com/watch?v=GGXzlRoNtHU&amp;feature=kp">Who doesn&#8217;t like to win</a>?</p>

<p>I had an inkling that it might be so when we were some of the last participants to get shooed out of the common space on Saturday night, but I didn&#8217;t want to jinx us by bringing it up.  Besides, as all pseudo-mystics and hippies are so fond of pointing out, the journey is the destination.  Given that my last Startup Weekend company was less than satisfactory (though it was a long time ago), I couldn&#8217;t be any happier.</p>

<p>Until next time, stay sassy Internet.  And don&#8217;t forget to keep hustlin&#8217;.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Banging Your Head Against an AngularJS Issue?  Try This]]></title>
    <link href="http://nathanleclaire.com/blog/2014/01/31/banging-your-head-against-an-angularjs-issue-try-this/"/>
    <updated>2014-01-31T19:53:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/01/31/banging-your-head-against-an-angularjs-issue-try-this</id>
    <content type="html"><![CDATA[<p><img src="/images/scope-apply/frustration.jpg" title="Have you been debugging something that seems trivial in Angular for so long that your face looks like this?" ></p>

<p>As I&#8217;ve gotten a <a href="http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/">little</a> <a href="http://nathanleclaire.com/blog/2014/01/11/dragging-and-dropping-images-from-one-browser-tab-to-another-in-angularjs/">into</a> <a href="http://angularjs.org">AngularJS</a> I&#8217;ve been surprised by how often my assumptions about how things will work have turned out to be wrong.  When you start to form a basic mental model of how Angular works and you hit your first stumbling block where your model turns out to be incorrect it can be really, really, frustrating.  In particular I had one issue that kept cropping up so often I began trying it before running to Google for help if something wasn&#8217;t working the way I would have expected (all my views should just magically sync up with what&#8217;s on <code>$scope</code>, right?).  This solution is to make sure <code>$scope.$apply</code> is getting used in the proper manner when updates to <code>$scope</code> are happening, especially if they are happening in unusual places e.g. inside of directives.  Since I don&#8217;t really like &#8220;magical&#8221; or knee-jerk fixes to problems I highly recommend Jim Hoskins&#8217;s article on <code>$scope.$apply</code> which you can find <a href="http://jimhoskins.com/2012/12/17/angularjs-and-apply.html">here</a>.</p>

<h1>Use <code>$scope.$apply</code></h1>

<p>During your first foray into Angular you will probably not come across this as it is one of those hidden, quasi-leaky-abstraction sort of things that only becomes well known to you as you work on getting a non-trivial app off the ground.  After all, it&#8217;s not really needed for the <a href="http://todomvc.com/architecture-examples/angularjs/#/">todo-list app</a> of yore but it becomes much more important when you are doing funny things like manipulating scope deep inside of directives and so on.  So, having been bit by the issue multiple times, I recommend trying a call to <code>$scope.$apply</code> (either wrap the changes to <code>$scope</code> properties inside a <code>$scope.apply</code> callback, or call <code>$scope.$apply</code> on its own after <code>$scope</code> properties have been updated)  See the documentation <a href="http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/">here</a>.</p>

<p>The issue is around updating properties on <code>$scope</code>, either in directives or in controllers, and not having the updated changes be reflected on the front-end in the manner which you expect (either they will not show up at all, or they will happen in an order which you do not anticipate, which will cause bugs).  This is because Angular has what is known as a digest-watch cycle where all of this gets figured out:</p>

<p><img src="/images/scope-apply/digest-cycle.png"></p>

<p>As automagical as Angular is in some ways, it has no way of knowing when your property has been updated outside of Angular-land (and sometimes doesn&#8217;t even bother when it is updated <em>in</em> Angular-land, as per the example that follows).  So it requires a call to <code>$scope.$apply</code> to stay in sync.</p>

<h1>Example</h1>

<p>Let&#8217;s say you have a list of numbers displayed with <code>ng-repeat</code> and you want to <code>shift</code> one off the list when the user presses the right arrow key, and redisplay them one at a time if the user presses the left arrow key.  Our controller code (on first attempt) would look something like this:</p>

<pre><code class="js">.controller('NumCtrl', function($scope) {
    var history = [];
    $scope.numbersDisplayed = [0,1,2,3,4,5];

    $scope.moveRight = function() {
        history.unshift($scope.numbersDisplayed.shift());
    };

    $scope.moveLeft = function() {
        $scope.numbersDisplayed.unshift(history.shift());
    };
})
</code></pre>

<p>We&#8217;re ignoring bounds-checking for the sake of simplicity in this demonstation.  Our directive, designated to watch for user input on the element where this is happening (will be <code>&lt;body&gt;</code> in our case since it is a simple little example), will look like this:</p>

<pre><code class="js">.directive('arrowListener', function() {
    return {
        restrict: 'A', // attribute
        scope: {
            moveRight: '&amp;', // bind to parent method
            moveLeft: '&amp;'
        },
        link: function(scope, elm, attrs) {
            elm.bind('keydown', function(e) {
                if (e.keyCode === 39) {
                    scope.moveRight();
                }
                if (e.keyCode === 37) {
                    scope.moveLeft();
                }
            })
        }
    };
})
</code></pre>

<p>If you try the above code, you&#8217;ll notice that it doesn&#8217;t work.  The variable on <code>$scope</code> gets changed correctly, but this change is not reflected in the view.  In order to make it work you have to change the controller code to :</p>

<pre><code class="js">.controller('NumCtrl', function($scope) {
    var history = [];
    $scope.numbersDisplayed = [0,1,2,3,4,5];

    $scope.moveRight = function() {
        history.unshift($scope.numbersDisplayed.shift());
        $scope.$apply();
    };

    $scope.moveLeft = function() {
        $scope.numbersDisplayed.unshift(history.shift());
        $scope.$apply();
    };
})
</code></pre>

<p>You could also invoke <code>scope.$apply</code> in the directive itself.  To be honest, I&#8217;m not sure what the Angular gurus would consider best practice.  Perhaps the latter since it is more DRY.</p>

<p><em>EDIT</em>: I have received an email from a reader, Andrew Greenberg, that indicates the latter is indeed the way to go.  In fact, he points out a deeper flaw in my reasoning/approach:</p>

<blockquote><p>[There&#8217;s a problem with your code] &#8230; that can be the cause of significant bugs down the road, because it calls <code>$apply</code> from a scope inside the controller.  This will fail when that function is called from inside an AngularJS <code>$digest</code> cycle, for example, when the functions are called in any expression in the HTML (unless the directive is created in an isolate scope).</p>

<p>As you know, Angular whines hard when <code>$apply</code> is called inside an <code>$apply</code> or <code>$digest</code>.</p>

<p>The better practice is to call <code>$apply</code> only when you know you are outside of a <code>$digest</code> loop, such as inside the directive link function.  That is, keep the <code>$apply</code> out of a <code>$controller</code>, which is accessible to the declarative code in HTML or in another controller — and do the <code>$apply</code> in the directive link function, when you know you are outside of the <code>$digest</code> loop (I think).</p></blockquote>

<p>So there you have it- reasoning why you should call <code>$scope.$apply</code> or <code>$scope.$digest</code> in the link function of your directives, not in your controllers.  My code revised to meet these requirements would look like this:</p>

<pre><code class="js">.directive('arrowListener', function() {
    return {
        restrict: 'A', // attribute
        scope: {
            moveRight: '&amp;', // bind to parent method
            moveLeft: '&amp;'
        },
        link: function(scope, elm, attrs) {
            elm.bind('keydown', function(e) {
                if (e.keyCode === 39) {
                    scope.moveRight();
                }
                if (e.keyCode === 37) {
                    scope.moveLeft();
                }
                scope.$apply();
            })
        }
    };
})
.controller('NumCtrl', function($scope) {
    var history = [];
    $scope.numbersDisplayed = [0,1,2,3,4,5];

    $scope.moveRight = function() {
        history.unshift($scope.numbersDisplayed.shift());
    };

    $scope.moveLeft = function() {
        $scope.numbersDisplayed.unshift(history.shift());
    };
})
</code></pre>

<p>Writing it out, this way looks a bit cleaner to me as well.</p>

<p>A Plunker demo of these concepts in action:</p>

<iframe src="http://embed.plnkr.co/agbSSuA2Mwx5pAd8kZSw/preview"></iframe>


<h1>Conclusion</h1>

<p>This is one of those nasty issues I wish someone would have pointed out to me from the start.  So here you go, guys, hopefully you can get something out of the suffering I&#8217;ve gone through to develop an almost sixth-sense like awareness of when a <code>$scope.$apply</code> will be needed.</p>

<p>Until next week, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Smooth AngularJS Application Tips]]></title>
    <link href="http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/"/>
    <updated>2014-01-04T14:24:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips</id>
    <content type="html"><![CDATA[<p>Anyone who follows my blog even a little closely can probably see that I &lt;3 AngularJS:</p>

<ul>
<li><a href="http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/">How to Unit Test Controllers In AngularJS Without Setting Your Hair On Fire</a></li>
<li><a href="http://nathanleclaire.com/blog/2013/12/07/dont-fear-directives-in-angular-dot-js/">Don’t Fear Directives In AngularJS</a></li>
<li><a href="http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-dot-js/">Fear and Loathing With Golang and AngularJS</a></li>
</ul>


<p>As I&#8217;ve learned more about the framework, I&#8217;ve come to appreciate many of the design decisions in spite of their initial (beastly) learning curve.  For example, directives provide an absurd amount of flexibility and expressiveness in writing declarative HTML that is unmatched by jQuery-style imperative DOM twiddling.  But the learning curve on them, and other bits of Angular, is weird:</p>

<p><img src="/images/smooth-angular-tips/js-learning-curves.jpeg" title="Hearkens to the Emacs graph of yore." ></p>

<p>Some things that should be pretty straightforward, like navigating from tab to tab in single-page web applications, can be a little confusing to cough up in code <em>100% GUARANTEED TO BE CORRECT &#0153;</em>.  So here&#8217;s a blog article with some cool tips to help you out.</p>

<h1>Highlighting the active tab for the view</h1>

<p>I touched on this a little bit in my unit testing article.  In many applications (single-page ones especially) you&#8217;ll want to assign or get rid of classes on tabs or other navigation features to help the user understand where they&#8217;re navigating to or from (see Bootstrap&#8217;s <code>.active</code> class).  How do we set these conditionally in Angular when we are using partials, and the default routing solution rednering in the <code>ng-view</code> directive?  Simple.  We can use the <code>$location</code> service and declare an <code>ng-class</code> attribute that depends on the result of a simple <code>$scope</code> method.</p>

<p>In the controller:</p>

<pre><code class="js">app.controller('NavCtrl', function($scope, $location) {
    $scope.isActive = function(route) {
        return route === $location.path();
    };
});
</code></pre>

<p>In the view:</p>

<p>&#8220;`</p>

<ul class="nav navbar-nav">
    <li ng-class="{active: isActive('/profile')}">
        <a href="#/profile"><i class="fa fa-dashboard"></i> You</a>
    </li>
    <li ng-class="{active: isActive('/find')}">
        <a href="#/find"><i class="fa fa-bar-chart-o"></i> Find Friends</a>
    </li>
    <li ng-class="{active: isActive('/network')}">
        <a href="#/network"><i class="fa fa-table"></i> Network </a>
    </li>
    <li ng-class="{active: isActive('/chat')}">
        <a href="#/chat"><i class="fa fa-edit"></i> Chat Room </a>
    </li>
</ul>


<p>&#8220;`</p>

<p>Plunker demo of this concept:</p>

<iframe src="http://embed.plnkr.co/Yci9oM/preview"></iframe>


<p>Very useful and IMO, very clean.</p>

<h1>Abstracting business / data providing logic into services</h1>

<p>This is more of an architecture tip than a general solution for common problems, but with my <a href="http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/">recent article on unit testing Angular applications</a> a commenter on Hacker News pointed out that for a variety of reasons I should be putting more of my functions / code that retrieves data to be used in <code>$scope</code> by the controller into services, freeing the controller to just &#8220;glue it all together&#8221; (this also makes mocking things like AJAX calls a lot easier by avoiding <code>$httpBackend</code>).  I hadn&#8217;t really used services very much and all of the talk of factories etc., as well as a general dearth of actual examples in the official documentation on how or why to use them, left me a little bit hesitant to jump right in.  He was kind enough to provide some example code and it made things a bit more lucid for me.  Hopefully the following explanation will help to explain the use case for services as well as provide an illuminating example.</p>

<p>Let&#8217;s say that you want to keep track of some data which multiple controllers can access.  Perhaps it is weather data, preloaded into the page upon load (we&#8217;ll cover using AJAX in this case later in the article) and you need to access it in the user&#8217;s menu bar at the top of the page (to display the current temperature) as well as in a view frame for visualizing complex weather data over time.  We could attempt to jerry-rig together a solution for communicating this from controller to controller using Angular&#8217;s <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope">event system</a> or we could just chuck the aggregate data into <code>$rootScope</code>, but both of those situations are highly awkward from a standpoint of both future and present development.  The solution that Angular provides us for usecases where we need to share (possibly mutable) data between controllers, or interact with things outside of Angular-land (other than the DOM, which is what directives are used for) is to use services.  Services are singleton objects (only instantiated once) that serve as this kind of &#8220;bridge&#8221; or interface from Angular to the outside world or between different parts of your Angular application.  In case you&#8217;re unfamiliar, services are usually created using the <code>factory</code> method on your application module and injected into controllers for use like so:</p>

<pre><code class="js">app.factory('weatherService', function() {
    var weatherData = window.jsObjFromBackend.weather.data;
    return {
        // default to A2 Michigan
        state : 'MI',
        city: 'Ann Arbor',
        getTemperature : function() {
            return weatherData[this.state][this.city].temperature;
        },

        setCity : function(city) {
            this.city = city;
        },

        setState : function(state) {
            this.state = state;
        } 
    };
});
app.controller('MainCtrl', function(weatherService) {
    $scope.temperature = weatherService.getTemperature();   
});
</code></pre>

<p>You can use them in several controllers and they will save you the headache of trying to sync up data over multiple controllers.  They are also a great place to store <code>AWKWARD_CONSTANT_THAT_WOULD_OTHERWISE_BE_GLOBAL</code>.</p>

<h1>Retaining state when switching from view to view</h1>

<p>Services also can save you a potential history headache when navigating from view to view.  If you have some kind of state in one view that you want to be preserved so you can navigate to another view, then back to the original view intact (instead of re-loading the partial which is Angular&#8217;s default behavior), you will find this to be a very handy use case for a service.</p>

<p>For instance, if you wanted to keep track of where a user had scrolled in a <code>&lt;div&gt;</code> element with its <code>overflow</code> propert(y|ies) set to <code>scroll</code>, you could use a combination of a service and a directive to maintain this state.  We will keep track of where the user has scrolled in a service, and coordinate adjusting the element back to that <code>scrollTop</code> state in the <code>link</code> function of the directive (you can inject services into directives much like you inject them into controllers).</p>

<p>Our service is simple:</p>

<pre><code class="js">app.factory('rememberService', function() {
    return {
        scrollTop: undefined
    };
});
</code></pre>

<p>Our directive does a little bit more:</p>

<pre><code class="js">app.directive('scroller', function($timeout, rememberService) {
    return {
        restrict: 'A', // this gets tacked on to an existing &lt;div&gt;
        scope: {},
        link: function(scope, elm, attrs) {
            var raw = elm[0];  // get raw element object to access its scrollTop property

            elm.bind('scroll', function() {
                // remember where we are
                rememberService.scrollTop = raw.scrollTop;
            });

            // Need to wait until the digest cycle is complete to apply this property change to the element.
            $timeout(function() {
                raw.scrollTop = rememberService.scrollTop;
            });
        }
    };
});
</code></pre>

<p>We attach it to the <code>&lt;div&gt;</code> we want to affect like so:</p>

<p>&#8220;`</p>

<div class="scroll-thru-me" scroller>
 <div id="lots-of-stuff">
    &#8230;
 </div>
</div>


<p>&#8220;`</p>

<p>The element will render in the correct <code>scrollTop</code> location.  Obviously this service can be made more complex if neccesary to coordinate maintaining state in a large application.</p>

<p>The following plunker, a modified version of the first plunker on this page, demonstrates the idea.  Try navigating to tab 2, scrolling around a bit, travelling back to view 1 and then back to view 2 yet again.  As you can see, the state of where the user has scrolled to is retained.</p>

<iframe src="http://embed.plnkr.co/3ozt9s/preview"></iframe>


<h1>Making AJAX calls from services</h1>

<p>So what if you want to use Angular&#8217;s <code>$http</code> service to retrieve or set some data on the server, and interact with it from a controller?  We know by now that we should be using services to perform this kind of data-getting, but how do we deal with this asynchrony?  Doing so is not too painful, we simply return the <code>promise</code> Angular gives us when we make an AJAX call, and use the <code>then</code> method to define our callback in the controller.  A simple example:</p>

<pre><code class="js">app.factory('githubService', function($http) {
    var GITHUB_API_ENDPOINT = 'https://api.github.com';
    return {
        getUserInfo: function(username) {
            return $http.get(GITHUB_API_ENDPOINT + '/users/' + username);
        }
    }   
});  

app.controller('MainCtrl', function($scope, githubService) {
    // assuming $scope.username is set with ng-model
    githubService.getUserInfo($scope.username).then(function(data) {
        $scope.userInfo = data;
    });
});
</code></pre>

<p>But what if you want the service to take care of some more stuff (e.g. parsing the response for the desired data) for the controller so they don&#8217;t have to mess with all that business logic?  As an example, note that the response from <code>'https://api.github.com/users/nathanleclaire'</code> returns</p>

<pre><code>{
  "login": "nathanleclaire",
  "id": 1476820,
  "avatar_url": "https://gravatar.com/avatar/3dc6ac660128ff3640413d4036fed744?d=https%3A%2F%2Fidenticons.github.com%2F32974b06cb69bfa6e7331cd4a26dc033.png&amp;r=x",
  "gravatar_id": "3dc6ac660128ff3640413d4036fed744",
  "url": "https://api.github.com/users/nathanleclaire",
  "html_url": "https://github.com/nathanleclaire",
  "followers_url": "https://api.github.com/users/nathanleclaire/followers",
  "following_url": "https://api.github.com/users/nathanleclaire/following{/other_user}",
  "gists_url": "https://api.github.com/users/nathanleclaire/gists{/gist_id}",
  "starred_url": "https://api.github.com/users/nathanleclaire/starred{/owner}{/repo}",
  "subscriptions_url": "https://api.github.com/users/nathanleclaire/subscriptions",
  "organizations_url": "https://api.github.com/users/nathanleclaire/orgs",
  "repos_url": "https://api.github.com/users/nathanleclaire/repos",
  "events_url": "https://api.github.com/users/nathanleclaire/events{/privacy}",
  "received_events_url": "https://api.github.com/users/nathanleclaire/received_events",
  "type": "User",
  "site_admin": false,
  "name": "Nathan LeClaire",
  "company": "Systems In Motion",
  "blog": null,
  "location": "Ann Arbor",
  "email": null,
  "hireable": false,
  "bio": null,
  "public_repos": 18,
  "public_gists": 7,
  "followers": 12,
  "following": 9,
  "created_at": "2012-02-26T23:19:45Z",
  "updated_at": "2014-01-04T23:01:51Z"
}
</code></pre>

<p>There&#8217;s quite a bit of information here, and with more complex API calls response will be full of nested objects and arrays.  What if we just wanted to get the <code>avatar_url</code> with <code>githubService.getUserAvatarUrl(username)</code> and didn&#8217;t care about any of the other stuff?  We can use promise chaining to take care of this logic in the service.  Whatever is returned from the callback on the <code>then</code> method which has been invoked on the result of our <code>$http.get()</code> call (a promise object) will be passed to the callback function on the controller promise&#8217;s <code>then</code> method:</p>

<pre><code class="js">app.factory('githubService', function($http, $q) {
    var GITHUB_API_ENDPOINT = 'https://api.github.com';
    return {
        getUserAvatarUrl: function(username) {
            return $http.get(GITHUB_API_ENDPOINT + '/users/' + username).then(function(res) {
                // Though our return value is simple here, it could easily involve searching/parsing
                // through the response to extract some metadata, higher-order information, etc. that
                // we really shouldn't be parsing in the controller 
                return res.data.avatar_url;
            });
        }
    }   
});

app.controller('MainCtrl', function($scope, githubService) {
    // assuming $scope.username is set with ng-model
    githubService.getUserAvatarUrl($scope.username).then(function(avatarSrc) {
        $scope.avatarSrc = avatarSrc;
    });
});
</code></pre>

<p>Smooth.</p>

<p>Plunkr demo:</p>

<iframe src="http://embed.plnkr.co/e9MHuI/preview"></iframe>


<h1>Conclusion</h1>

<p>That&#8217;s all for now, folks.  Hope you&#8217;ve picked up some useful stuff along the way.  And as always, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Cool Unix Hacks For Fun and Productivity]]></title>
    <link href="http://nathanleclaire.com/blog/2013/10/27/5-cool-unix-hacks-for-fun-and-productivity/"/>
    <updated>2013-10-27T19:44:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2013/10/27/5-cool-unix-hacks-for-fun-and-productivity</id>
    <content type="html"><![CDATA[<p>In my workflow I am always looking for ways to be more productive, and to have more fun while developing.  There&#8217;s nothing quite like the feeling of flying through a sequence of commands in <code>bash</code> that you know would take your peers twice as long to execute.  Have you ever :</p>

<ul>
<li>Raged silently at a coworker for spamming the left arrow key to get to the beginning of their terminal prompt when they could have just pressed CTRL + A ?</li>
<li>Watched someone as they enter the same command over and over when they could have just prefaced it with <code>!</code> ?</li>
<li>Rolled your eyes as your buddy expounds at length on the virtues of IDEs when you know that you could &#8220;roflstomp&#8221; him or her using <code>vim</code> ?</li>
</ul>


<p>If so, then these tips might be for you.</p>

<p><em>DISCLAIMER:</em> There&#8217;s an admitted bias towards <code>vim</code>, <code>git</code>, and the terminal here.  I don&#8217;t intend to start a holy war about terminal vs. IDEs, just have some fun and point out these fun tricks that work well for me.</p>

<h1>git add -p</h1>

<p>If you&#8217;ve worked with <code>git</code> for any non-trivial amount of time you hopefully have come across the notion of making <a href="http://stackoverflow.com/questions/6543913/git-commit-best-practices">atomic commits</a>.  Essentially, the notion is that a commit should contain only interrelated details, and not anything that&#8217;s logically unrelated to the things you are committing.  For example, it makes sense to commit changes to a class and its corresponding unit test in one commit, but if you&#8217;ve made changes to another class that deal with completely different business logic then those should be in another commit.</p>

<p>However, what happens when you are working within one file that contains multiple unrelated changes, or changes that you&#8217;d like to split up into more than one commit in case you need to revert them separately?  Or you have sprinkled logging statements all over the file that you don&#8217;t want to commit to the repo?  The normal sequence of git commands that people use fails us here:</p>

<pre><code>$ git diff
diff --git a/some-file.c b/some-file.c
index f383179..09e4e35 100644
--- a/some-file.c
+++ b/some-file.c
@@ -2,6 +2,8 @@

 int main(void) {
        printf("doing some stuff\n");
-       printf("doing some more stuff\n");
+       do_some_stuff();
+       printf("doing some unrelated stuff\n");
+       do_some_unrelated_stuff();
        return 0;
 }
$ git add some-file.c
$ git commit
[master 1938906] some unrelated stuff, cramming it all in one commit 'cause I'm lazy
 1 file changed, 3 insertions(+), 1 deletion(-)
$ echo "Whoops we just committed unrelated stuff.  Not very modular of us."
</code></pre>

<p>The <code>-p</code> (standing for patch) flag for <code>git add</code> is ridiculously useful for these kinds of cases.  This tells <code>git add</code> that we want to do a <em>partial</em> add of the file, and we&#8217;re presented with a nice interative menu which allows us to specify with a lovely amount of detail exactly which parts of the file we want to stage.  <code>git</code> splits the changes into hunks automatically, which you can approve or reject with <code>y</code> or <code>n</code> respectively, or use <code>s</code> to split up into finer grained hunks.  If <code>git</code> can&#8217;t split the hunks up the way you want automatically, you can specify as much detail as you want with the <code>e</code> (edit) option.</p>

<p><img src="/images/five-tips/git-add-minus-p.jpeg" title="And now our commits are nice and tidy." ></p>

<p>See here for more details on <code>git add -p</code>: <a href="http://stackoverflow.com/questions/1085162/how-can-i-commit-only-part-of-a-file-in-git">How can I commit only part of a file in git?</a></p>

<p><em>EDIT:</em> Some commenters have pointed out that this usage of <code>-p</code> flag also works for commands such as <code>git checkout --</code>.  Therefore you could hypothetically send only part of a file back to the way it was at HEAD, and keep your other changes.  Handy!</p>

<h1>vim&#8217;s CTRL-P / CTRL-N autocomplete feature</h1>

<p>This is one of those killer features of <code>vim</code> that I am surprised to find out people (even experienced <code>vim</code> gurus) don&#8217;t use more frequently.  Even if you are a casual user (hop into <code>vim</code> to edit some config files while <code>ssh</code>ed into a box) it has the potential to help you out quite a bit.  One of the reasons people claim they couldn&#8217;t live without IDEs is the existence of features such as Intellisense that provide autocompletion of variable/function names.  These features are very nice since they cut down on mistakes due to misspelling properties and thereby speed up the compile/run/debug cycle a fair bit.  Many people don&#8217;t seem to realize that there is an analog which comes straight out of the box in <code>vim</code>, no plugins needed.</p>

<p>You can press CTRL-N to move down the list of suggested completions when typing in INSERT mode (which vim draws from the current buffers, and from the <code>tags</code> file if you have one), or CTRL-P to move back up (representing &#8220;NEXT&#8221; and &#8220;PREVIOUS&#8221; if you didn&#8217;t catch the mnemonic).  If there is only one possible completion, <code>vim</code> will just go ahead and insert it.  Very handy and speedy, especially in codebases with a lot of long variable / method / constant names.</p>

<p>CTRL-P/CTRL-N have a lot of synergy with the next tip as well, as touched upon briefly in the above paragraph.</p>

<p><img src="/images/five-tips/ctrl-n-vim.jpeg" title="And you barely need to leave the home row." ></p>

<h1>exuberant ctags</h1>

<p>Everyone who uses <code>vim</code> knows that it can be a bit of a kerfluffle sometimes to open a file in a distant directory (tab completion helps ease this with <code>:e</code>, but it&#8217;s still not usually instantaneous).  If you happen to be working on a team, or a very large project, the ability to do this quickly will likely be a vital part of your workflow.</p>

<p><a href="http://ctags.sourceforge.net/">Exuberant Ctags</a> is a tool that makes this worlds easier than it would be without.  With ctags, you can  you just run a command in the top directory of the project you&#8217;re working on to generate a &#8220;tags&#8221; file, then you can use CTRL-] to &#8220;pop into&#8221; the definition of whatever it is your cursor is over (say, a class name).  Press CTRL+T to get back to where you were before.</p>

<p>You can even set up a <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">post-commit hook in git</a> to generate your ctags file automatically when you make a commit!  Nice.</p>

<h1>CTRL-R in bash and zsh</h1>

<p>Ever been typing in a command at the terminal, when you suddenly find yourself wishing that there was an easy way to just autofill the prompt with something that you&#8217;d entered previously so you can edit it or just run it again?  If so, then I&#8217;ve got good news for you:  You can!  Just press CTRL+R and start typing the thing that you are looking for.  The terminal will fill in what it thinks you are looking for, and if there is more than one option you can cycle through them by pressing CTRL+R repeatedly.  When you&#8217;ve found the thing you&#8217;re after, you can break out of the prompt with any of the usual movement commands (CTRL+A, CTRL+E, arrow keys, etc. if you have standard <code>bash</code> keybindings).  Try it out!  Very handy if you can&#8217;t remember the name of the box you want to <code>ssh</code> into.</p>

<p><img src="/images/five-tips/ctrl-r.jpeg" title="What was that IP address again?" ></p>

<p><code>history | grep $COMMAND</code> will treat you well too, if you just want to review all of the times you&#8217;ve run that command in recent times.</p>

<h1>vim macros</h1>

<p>A lot of the time when you&#8217;re writing code, or doing related tasks, you find yourself in need of a way to repeat the same editor commands over and over, perhaps with a slight variation.  Different editors provide slightly different ways of addressing this.  <a href="http://www.sublimetext.com/">Sublime Text</a>, for example, has a &#8220;killer feature&#8221; where you are able to place multiple cursors in various locations and edit away.  In <code>vim</code> (and in <code>emacs</code> too, but here we&#8217;ll be covering the <code>vim</code> method) you record and playback keyboard macros to accomplish this.  It is a tool with an absurd amount of power and flexibility, and offers the chance to speed up productivity on repetitive editing tasks by an order of magnitude.</p>

<p>To make a macro, press <code>q</code> in normal mode, then press another key to &#8220;name&#8221; the macro (usually I use <code>q</code> again).  <code>vim</code> will start recording your keystrokes.  <code>vim</code> will remember which keystrokes you make until you press <code>q</code> again to save the macro.  You can replay with <code>@</code>-letter in normal mode, so I am usually pressing <code>@q</code>.  You can also preface the <code>@</code>/replay command with a number so that you can rapidly execute your macro over and over (like much in <code>vim</code>-land, the &#8220;grammar&#8221; behaves as you would be accustomed to).  If you&#8217;re accustomed to using <code>vim</code>&#8217;s fancy movement commands (for instance, using <code>/</code> search to navigate), and practice a little bit, you will soon be able to whip up thunderous macros that will leave your mouse-dependent colleagues in the dust.</p>

<p><img src="/images/five-tips/vim-macros.gif" title="Who needs multiple cursors?" ></p>

<p>For more info on <code>vim</code> macros, see here: <a href="http://vim.wikia.com/wiki/Macros">Vim Wiki (Macros)</a></p>

<p>That&#8217;s all for now, folks.  Hope you enjoyed and I&#8217;ll see you next week!</p>
]]></content>
  </entry>
  
</feed>
