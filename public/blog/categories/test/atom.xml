<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | nathan leclaire]]></title>
  <link href="http://nathanleclaire.com/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://nathanleclaire.com/"/>
  <updated>2014-09-29T03:20:27+00:00</updated>
  <id>http://nathanleclaire.com/</id>
  <author>
    <name><![CDATA[Nathan LeClaire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash Scripting and the Legend of the Hidden Bracket]]></title>
    <link href="http://nathanleclaire.com/blog/2014/09/07/bash-scripting-and-the-legend-of-the-hidden-bracket/"/>
    <updated>2014-09-07T22:55:23+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/09/07/bash-scripting-and-the-legend-of-the-hidden-bracket</id>
    <content type="html"><![CDATA[<p><img src="/images/hiddenbracket/temple.jpeg"></p>

<h2>#!/bin/article</h2>

<p>It&#8217;s really amazing sometimes how frequently the shallowness of my UNIX knowledge gets exposed, even though I&#8217;ve been tinkering around with UNIX for ten-odd years and even own a yellow-paged, dusty old copy of Rob Pike and Brian Kernighan&#8217;s excellent book &#8220;THE UNIX PROGRAMMING ENVIRONMENT&#8221;.</p>

<p><img src="/images/hiddenbracket/unixprogrammingenv.gif"></p>

<p>It&#8217;s a great book, and it outlines a lot of the philosophy of UNIX perfectly, as well as regexp, sed, and other fundamental tools that are essential to being a command line power user.  Anyway, lately in my growing pains as a Bash scripter I&#8217;ve stumbled across an incredibly noteworthy fact that I feel compelled to share, if only to save anyone else the pain of learning it the hard way, like me, after years of hiding from writing more intricate Bourne-again shell scripts because I couldn&#8217;t ever remember the difference between <code>-f</code>, <code>-ne</code>, <code>==</code> and so on in comparisons.</p>

<p>It&#8217;s as simple as this: <code>[</code> is just a wrapper for the UNIX <code>test</code> command.</p>

<h1>test</h1>

<p><code>test</code> is one of those classic commands like <code>tr</code>, <code>cut</code>, etc. whose influence touches everyone but largely is cloaked from mere mortals and moderates such as myself.  I hadn&#8217;t realized it until someone recently pointed out that <code>[</code> is not syntax, it&#8217;s a <em>command</em>.</p>

<pre><code>$ which [
/bin/[
</code></pre>

<p>I don&#8217;t know about you, I assume my audience for this blog is probably at least a little bit UNIX literate, but this one really threw me for a loop when I found out.  Suddenly my whole outlook on shell scripting shifted as I realized that this was yet another instance of the UNIX &#8220;do one thing and do it right&#8221; way clicking into place for me.  As anyone accustomed to the flexibility afforded you by langauges such as Python and Ruby may be familiar with, I had had many bad experiences trying to cobble together even simple conditionals in impromptu shell scripts due to the seemingly esoteric syntax that <code>if</code>s required, as well as the usage of <code>==</code> and so on.  Perhaps I was spoiled in my UNIX education by being introduced to Python too early, and I should have learned to do things the hard way first.</p>

<p>At any rate, <code>[</code> is just a wrapper for the UNIX <code>test</code> command with the addition of a closing <code>]</code> at the end of the arguments.  That means the available comparisons can be easily looked up with man!</p>

<p><img src="/images/hiddenbracket/man.png" title="I&#8217;ve probably been set back a lot by not knowing about this." ></p>

<p>Having the available comparisons right at my fingertips like this has made me feel so much more empowered with shell scripting.  Previously when I wanted run a test I had to Google around for &#8220;shell script comparisons&#8221; etc., find a website that looked promising, and squint my way through a table or equivalent to find the relevant flags.  Now I can just pop a new terminal window open and use <code>/</code> search inside of <code>man</code>!</p>

<p>Walkthough of some uses of <code>test</code>, for kicks:</p>

<p>Test if two strings are equal:</p>

<pre><code>if [ "$FOO" == "BAR" ]; then
    echo "FOO environment variable value is equal to \"BAR\""
fi
</code></pre>

<p>Check if a given path is a directory:</p>

<pre><code>if [ -d src/ ]; then
    echo "src exists"
fi
</code></pre>

<p>Check if output of command was a certain value:</p>

<pre><code>(exit 2)
if [ $? -eq 2 ]; then
    echo "Received error exit code"
fi
</code></pre>

<h1>fin</h1>

<p>Anyway, that&#8217;s my bit of bash-nerdery for the day.  I hope I can help some people out, who may have been struggling with the same issue as me: a combination of over-thinking things and a lack of someone showing me the correct way early on.</p>

<p>Until next time, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
</feed>
