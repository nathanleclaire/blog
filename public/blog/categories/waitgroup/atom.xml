<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: waitgroup | nathan leclaire]]></title>
  <link href="http://nathanleclaire.com/blog/categories/waitgroup/atom.xml" rel="self"/>
  <link href="http://nathanleclaire.com/"/>
  <updated>2014-09-29T03:13:10+00:00</updated>
  <id>http://nathanleclaire.com/</id>
  <author>
    <name><![CDATA[Nathan LeClaire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Wait for All Goroutines to Finish Executing Before Continuing, Part Two:  Fixing My Oops]]></title>
    <link href="http://nathanleclaire.com/blog/2014/02/21/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing-part-two-fixing-my-ooops/"/>
    <updated>2014-02-21T17:03:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/02/21/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing-part-two-fixing-my-ooops</id>
    <content type="html"><![CDATA[<p>Earlier this week I published an article called <a href="http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/">How To Wait for All Goroutines to Finish Executing Before Continuing</a> detailing a problem that I&#8217;d run into while coding with Golang and the solution that I&#8217;d encountered, which was to use <a href="http://golang.org/pkg/sync/#WaitGroup">sync.WaitGroup</a>.  I was still basking a little in that I-just-finished-a-new-blog-article afterglow when something in the <a href="http://www.reddit.com/r/golang/comments/1y3spq/how_to_wait_for_all_goroutines_to_finish/">Reddit comments</a> caught my eye!</p>

<p><img src="/images/syncwaitgroup2/enneff_speaks.jpeg" title="Oh." ></p>

<p>Turns out that my approach in the previous article causes a race condition.  So, just so you guys are all aware, I was wrong, and here&#8217;s why.</p>

<h1>What was wrong</h1>

<p>As <a href="http://reddit.com/u/enneff">/u/enneff</a> pointed out, there are a variety of issues with the examples I provided.</p>

<h2>What was wrong with the &#8220;Old-School way&#8221; code?</h2>

<p>I&#8217;ll start at the second example (The &#8220;Old-School&#8221; way) since the first example is REALLY bad by design (please don&#8217;t write Go like that).  I used a &#8220;done&#8221; channel to communicate the status of the goroutines, and it turns out that this was completely unneccsary.</p>

<p>The original code:</p>

<pre><code class="go">package main

import (
    "fmt"
    "time"
)

func main() {
    messages := make(chan int)

    // Use this channel to follow the execution status
    // of our goroutines :D
    done := make(chan bool)

    go func() {
        time.Sleep(time.Second * 3)
        messages &lt;- 1
        done &lt;- true
    }()
    go func() {
        time.Sleep(time.Second * 2)
        messages &lt;- 2
        done &lt;- true
    }() 
    go func() {
        time.Sleep(time.Second * 1)
        messages &lt;- 3
        done &lt;- true
    }()
    go func() {
        for i := range messages {
            fmt.Println(i)
        }
    }()
    for i := 0; i &lt; 3; i++ {
        &lt;-done
    }
}
</code></pre>

<p>Thinking about it a bit, enneff&#8217;s assertion that the channel is unneeded makes a lot of sense, since you know the number of messages ahead of time.  It&#8217;s a great example of how you shouldn&#8217;t needlessly overcomplicate things (<a href="http://legacy.python.org/dev/peps/pep-0020/">simple is better than complex</a>).</p>

<pre><code class="go">package main

import (
    "fmt"
    "time"
)

func main() {
    messages := make(chan int)
    go func() {
        time.Sleep(time.Second * 3)
        messages &lt;- 1
    }()
    go func() {
        time.Sleep(time.Second * 2)
        messages &lt;- 2
    }()
    go func() {
        time.Sleep(time.Second * 1)
        messages &lt;- 3
    }()
    for i := 0; i &lt; 3; i++ {
        fmt.Println(&lt;-messages)
    }
}
</code></pre>

<p>This code is shorter, and doesn&#8217;t introduce unneeded complexity.</p>

<h2>What was wrong with the &#8220;Canonical way&#8221; code?</h2>

<p>Well, for one thing, the messages channel doesn&#8217;t get closed, which could cause a memory leak.  It&#8217;s also not exactly cosidered the best use for a <code>WaitGroup</code>.  As enneff put it:</p>

<blockquote><p>The original program leaves the printing goroutine hanging (it blocks trying to receive a fourth message that never comes). This will create a memory leak in a long-running problem. You need to close the messages channel after the wg.Wait, to make sure that goroutine terminates. Obviously not a problem in a trivial program, but we should teach good practices at all times. But that still doesn&#8217;t solve the problem of the racing and printing goroutines, and there&#8217;s no reason why the so-called &#8220;old-school&#8221; way isn&#8217;t appropriate here. When you know the number of messages to expect you might as well count them to know when to finish. Here the waitgroup is superfluous and confusing. WaitGroups are more useful for doing different tasks in parallel.</p></blockquote>

<p>More importantly, I mistakenly put the code to print the results in its own goroutine, which causes a race condition between the main goroutine and the goroutine that is printing.  In many cases, the main goroutine will win this race, which is BAD!!  Turns out that my whole &#8220;sleep for a few seconds, then send a message down the channel&#8221; example is actually not a good example for wait groups at all.</p>

<p>The &#8220;fetch some JSON from the Reddit API&#8221; example, however, actually is a good candidate for <code>sync.WaitGroup</code>, and enneff even featured a rewrite that takes advantage of multiple channels to send errors in case something goes wrong!</p>

<pre><code class="go">// This snippet was prepared in response to this article:
// http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
)

func main() {
    urls := []string{
        "http://www.reddit.com/r/aww.json",
        "http://www.reddit.com/r/funny.json",
        "http://www.reddit.com/r/programming.json",
    }

    resc, errc := make(chan string), make(chan error)

    for _, url := range urls {
        go func(url string) {
            body, err := fetch(url)
            if err != nil {
                errc &lt;- err
                return
            }
            resc &lt;- string(body)
        }(url)
    }

    for i := 0; i &lt; len(urls); i++ {
        select {
        case res := &lt;-resc:
            fmt.Println(res)
        case err := &lt;-errc:
            fmt.Println(err)
        }
    }
}

func fetch(url string) (string, error) {
    res, err := http.Get(url)
    if err != nil {
        return "", err
    }
    body, err := ioutil.ReadAll(res.Body)
    res.Body.Close()
    if err != nil {
        return "", err
    }
    return string(body), nil
}
</code></pre>

<p>Lookin&#8217; good!</p>

<h1>Conclusion</h1>

<p>All I know is that I don&#8217;t know nothing.</p>

<iframe width="420" height="315" src="//www.youtube.com/embed/5HtUnubXAO4" frameborder="0" allowfullscreen></iframe>


<p>Thanks again to <a href="https://twitter.com/enneff">Andrew Gerrand</a> for helping me to learn more about Go.  And until next time, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Wait for All Goroutines to Finish Executing Before Continuing]]></title>
    <link href="http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/"/>
    <updated>2014-02-15T15:23:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing</id>
    <content type="html"><![CDATA[<p><em>EDIT:</em>  As pointed out by effenn in <a href="http://www.reddit.com/r/golang/comments/1y3spq/how_to_wait_for_all_goroutines_to_finish/cfh9fg7">this Reddit comment</a>, a lot of information in this article is &#8220;dangerously inaccurate&#8221;.  OOPS!  I&#8217;ve written a followup/correction article <a href="http://nathanleclaire.com/blog/2014/02/21/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing-part-two-fixing-my-ooops/">here</a> for your viewing pleasure, but I&#8217;m leaving this article up for &#8220;historical purposes&#8221;.</p>

<p><img src="/images/syncwaitgroup/gophermegaphones.jpeg"></p>

<p>Goroutines and channels are one of <a href="http://golang.org">Go</a>&#8217;s nicest language features.  They provide a rather headache-free way to use the power of concurrency in your Go programs, and they are baked into the language itself instead of relying on standard or external libraries.  I was very excited when I started playing around with them but eventually came across a problem : what if you want to wait for all goroutines (a kind of lightweight thread in case you&#8217;re not familiar) to finish executing before you continue execution in the current goroutine?</p>

<p>For instance, I came across this problem when I wanted to run a batch operation (transform some strings from a slice- kind of like a map) in parallel (and yes, I know that <a href="http://blog.golang.org/concurrency-is-not-parallelism">concurrency is not parallelism</a>).  I needed to know when this execution was over so my program didn&#8217;t exit prematurely.  How?</p>

<p>(Psst:  In case you just want the answer, and not the journey, it&#8217;s to use <a href="http://golang.org/pkg/sync/#WaitGroup">sync.WaitGroup</a>!)</p>

<p>In this article, I assume that you have some elementary proficiency with <a href="http://golang.org/doc/codewalk/sharemem/">goroutines and channels</a>.</p>

<h1>The Hacky Way</h1>

<p>A lot of tutorials or blog articles that you come across online when you start getting into this stuff will have examples like this (forgive me for being a little bit contrived but hopefully you&#8217;ll be familiar with the general idea):</p>

<pre><code class="go">package main

import (
    "fmt"
    "time"
)

func main() {
    messages := make(chan int)
    go func() {
        time.Sleep(time.Second * 3)
        messages &lt;- 1
    }()
    go func() {
        time.Sleep(time.Second * 2)
        messages &lt;- 2
    }() 
    go func() {
        time.Sleep(time.Second * 1)
        messages &lt;- 3
    }()
    go func() {
        for i := range messages {
            fmt.Println(i)
        }
    }()
    time.Sleep(time.Second * 5)
}
</code></pre>

<p>This will print out:</p>

<pre><code>3
2
1
</code></pre>

<p>because the goroutines all execute concurrently and some of the numbers sleep for longer than others.  If it weren&#8217;t for that <code>time.Sleep(time.Second * 5)</code> at the end, though, the program would terminate execution BEFORE the goroutines got a chance to finish executing and it would print nothing.</p>

<p>This kind of works for our contrived example but its hackiness makes me go &#8220;ICK!&#8221;.  Trying to make this style work in any nontrivial program would be a complete nightmare - what if we don&#8217;t know how long our goroutines will be executing for?  We&#8217;d rather not just cross our fingers and hope for the best.</p>

<h1>The &#8220;Old-School&#8221; Way</h1>

<p>As mentioned by a commenter in <a href="http://stackoverflow.com/questions/18207772/how-to-wait-for-all-goroutines-to-finish-without-using-time-sleep">this StackOverflow post</a>, the way that this was accomplished without using <code>sync.WaitGroup</code> is to use an additional channel to signify the end of execution.  Using this solution our previous example would look like:</p>

<pre><code>package main

import (
    "fmt"
    "time"
)

func main() {
    messages := make(chan int)

    // Use this channel to follow the execution status
    // of our goroutines :D
    done := make(chan bool)

    go func() {
        time.Sleep(time.Second * 3)
        messages &lt;- 1
        done &lt;- true
    }()
    go func() {
        time.Sleep(time.Second * 2)
        messages &lt;- 2
        done &lt;- true
    }() 
    go func() {
        time.Sleep(time.Second * 1)
        messages &lt;- 3
        done &lt;- true
    }()
    go func() {
        for i := range messages {
            fmt.Println(i)
        }
    }()
    for i := 0; i &lt; 3; i++ {
        &lt;-done
    }
}
</code></pre>

<p>This method is a little better but sacrifices some flexibility.  For instance, it introduces some additional weirdness in the case that we don&#8217;t actually know how many goroutines we want to spin up ahead of time.</p>

<h1>The Canonical Way</h1>

<p>As mentioned, the canonical way to do this is to use the <code>sync</code> package&#8217;s <code>WaitGroup</code> structure (<a href="http://golang.org/pkg/sync/#WaitGroup">link</a>).  From the docs:</p>

<blockquote><p>A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished. At the same time, Wait can be used to block until all goroutines have finished.</p></blockquote>

<p>To use <code>sync.WaitGroup</code> we:</p>

<ol>
<li>Create a new instance of a <code>sync.WaitGroup</code> (we&#8217;ll call it <code>wg</code>)</li>
<li>Call <code>wg.Add(n)</code> where <code>n</code> is the number of goroutines to wait for (we can also call <code>wg.Add(1)</code> <code>n</code> times)</li>
<li>Execute <code>defer wg.Done()</code> in each goroutine to indicate that goroutine is finished executing to the <code>WaitGroup</code> (see <a href="http://golang.org/doc/effective_go.html#defer">defer</a>)</li>
<li>Call <code>wg.Wait()</code> where we want to block.</li>
</ol>


<p>This fits our use case perfectly.  Rewritten, our code now uses <code>sync.WaitGroup</code> and looks like this:</p>

<pre><code class="go">package main

import (
    "fmt"
    "sync"
    "time"
)

func main() {
    messages := make(chan int)
    var wg sync.WaitGroup

    // you can also add these one at 
    // a time if you need to 

    wg.Add(3)
    go func() {
        defer wg.Done()
        time.Sleep(time.Second * 3)
        messages &lt;- 1
    }()
    go func() {
        defer wg.Done()
        time.Sleep(time.Second * 2)
        messages &lt;- 2
    }() 
    go func() {
        defer wg.Done()
        time.Sleep(time.Second * 1)
        messages &lt;- 3
    }()
    go func() {
        for i := range messages {
            fmt.Println(i)
        }
    }()

    wg.Wait()
}
</code></pre>

<p>This example is a little silly, but suppose we wanted to slurp JSON data from 3 different subreddits concurrently.  We don&#8217;t know how long those HTTP requests are going to take, and we don&#8217;t want to cause a race condition by trying to work with data that hasn&#8217;t been populated yet in our Go program, so <code>sync.WaitGroup</code> ends up being very handy:</p>

<pre><code class="go">package main

import (
    "fmt"
    "io/ioutil"
    "log"
    "net/http"
    "sync"
)

func main() {
    urls := []string{
        "http://www.reddit.com/r/aww.json",
        "http://www.reddit.com/r/funny.json",
        "http://www.reddit.com/r/programming.json",
    }
    jsonResponses := make(chan string)

    var wg sync.WaitGroup

    wg.Add(len(urls))

    for _, url := range urls {
        go func(url string) {
            defer wg.Done()
            res, err := http.Get(url)
            if err != nil {
                log.Fatal(err)
            } else {
                defer res.Body.Close()
                body, err := ioutil.ReadAll(res.Body)
                if err != nil {
                    log.Fatal(err)
                } else {
                    jsonResponses &lt;- string(body)
                }
            }
        }(url)
    }

    go func() {
        for response := range jsonResponses {
            fmt.Println(response)
        }
    }()

    wg.Wait()
}
</code></pre>

<p>Check out a <a href="http://runnable.com/UwEzO6LcUjMdAABH/using-sync-waitgroup-to-slurp-json-from-reddit-concurrently-wait-for-all-goroutines-to-finish-before-continuing-">Runnable</a> of this code in action!</p>

<h1>Conclusion</h1>

<p>Go is so very fun.  I need to start writing more of it again and put down this silly JavaScript stuff XD  <a href="http://martini.codegangsta.io/">Martini</a> looks super promising, so maybe I will develop and application with it.</p>

<p>Until next time, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
</feed>
