<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angular | nathan leclaire]]></title>
  <link href="http://nathanleclaire.com/blog/categories/angular/atom.xml" rel="self"/>
  <link href="http://nathanleclaire.com/"/>
  <updated>2014-09-29T03:13:10+00:00</updated>
  <id>http://nathanleclaire.com/</id>
  <author>
    <name><![CDATA[Nathan LeClaire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS isn't MVC, it's SDC]]></title>
    <link href="http://nathanleclaire.com/blog/2014/03/15/angularjs-isnt-mvc-its-sdc/"/>
    <updated>2014-03-15T12:38:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2014/03/15/angularjs-isnt-mvc-its-sdc</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<p><img src="/images/notmvc/angular-homepage-old.gif"></p>

<p>I first started learning AngularJS because I was interested in exploring the world of MV&#42; JavaScript frameworks for the client side.  There was something intruiging and exciting happening about a year or two ago in that space, as several JS frameworks started to get some steam and critical mass and the mainstream of client-side development (even those boring <a href="http://www.hanselman.com/blog/501DevelopersFamilyAndExcitementAboutTheCraft.aspx">5:01 developers</a> couldn&#8217;t ignore the zeitgeist anymore) seemed to wake up and realize that maybe there was a need for something more than just vanilla jQuery in applications where everything was spiraling way out of control.</p>

<p>So I started looking into Angular for the myriad reasons you usually hear people cite as a reason for using it.  It was backed by Google.  It was easy to get going quickly.  The quality of documentation and tutorials, though not fantastic, was starting to improve relative to Ember or more obscure frameworks.  It was fun.</p>

<p>My first foray went down in flames.</p>

<p><img src="/images/notmvc/javascript.png"></p>

<p>I fell into a common Angular antipattern (I may discuss Angular antipatterns more in a future article) where I stuffed everything into the controller.  Services and directives looked a little scary, and required learning esoteric things like what the meaning of <code>@</code>, <code>&amp;</code>, and <code>=</code> was in a directive, and instead I saw fit to simply stuff everything into <code>$scope</code> and coordinate activities using event broadcasting and listening.</p>

<p>That project became so un-fun to work on that I just stopped.  I had dug myself into a hole deeper than I would ever get out of without a complete rewrite.</p>

<p>Fortunately, partially through writing about Angular a lot, I eventually wised up.</p>

<p>I learned that Angular is structured in some ways that are similar to what we have experienced before, but it also hearkens a little bit to the future of the client side (see <a href="http://www.w3.org/TR/components-intro/">Web Components</a>).  And because of that, it had a little bit of new stuff too that threw me.</p>

<p>You may be used to the Model View Controller pattern- but that&#8217;s not what Angular is.   A subsection of it kind of looks like that, but if you take a step back you will see a bigger picture emerge.</p>

<p>Angular is Service, Directive, Controller.</p>

<h1>The Angular Way</h1>

<p>Angular is all about testability, and testability mandates that we be able to break our application into components.  In most cases, monoliths are considered harmful.  You probably understand why if you&#8217;ve ever worked on one.  Things become too brittle and easy to break.  They become tightly coupled.  It&#8217;s impossible to change codes without introducing bugs in unrelated places.  And so on.</p>

<p>Angular draws lines between separate parts of the architecture so that you can avoid many of these headaches.  In particular, dependency injection treats us well, as we rely on Angular&#8217;s injector to provide us with the things that we need instead of getting them ourselves.  This also allows us more control over how they are provided, which eases testing significantly (the developer has a smaller surface area that he needs to control).</p>

<p>Most applications use these underlying principles to do three things: Retrieve, process, or send out data (usually communicating with the &#8220;outside world&#8221; such as a database or API), present (display) that data to the user in a useful way, and coordinate the general state of the application (this includes features such as routing).</p>

<p>The first things that we mentioned, handling data, is the job of services.</p>

<h2>Services</h2>

<p>The main point of services is to dictate how data flows into or out of your application, not within it.  If you are talking to the outside world, this is a perfect use case for a service.  Controllers use methods and data provided by these services to update properties on <code>$scope</code>, which in turn dictates how the DOM changes when a new digest cycle hits.</p>

<p>When I was new to Angular, I flubbed this.  In particular the difference between <a href="http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory">services and factories</a> wasn&#8217;t clear to me, so I avoided them.  Instead I made <code>$http</code> calls inside of my controllers, which ended up turning my controllers into a confused mess of business and application logic.</p>

<p>This is <em>NOT</em> the way to go.  Instead, anything that involves setting, retrieving, or processing data should happen in services.  The leaner that your controllers are, the better.</p>

<p>Services should NEVER manipulate <code>$scope</code>.  That is the job of the controller.  If you need to change values in <code>$scope</code> based on the result of, say, an AJAX call, use <a href="http://docs.angularjs.org/api/ng/service/$q">promises</a>.  Check out <a href="http://nathanleclaire.com/blog/2014/01/04/5-smooth-angularjs-application-tips/">this blog article I wrote</a> for more details.</p>

<h2>Directives</h2>

<p>Directives are definitely one of the most confusing parts of AngularJS to a newcomer.  The prospect of writing your own is intimidating.  Especialy when I first started learning, the quality of available documentation and tutorials for them was not very high (this has improved a lot in the last year or so though).</p>

<p>But directives, for all that they intimidate the newbie, promise a land of amazing power.  Most people who are coming to Angular from a jQuery way of thinking run the risk of getting themselves in trouble by performing DOM manipulation outside of directives.  They are so used to the old way of doing things, where an element can be accessed willy-nilly by any piece of client side code that needs it.</p>

<p>Directives have several different forms but usually they are either completely new HTML elements, or attributes that you can throw on existing elements, to perform some kind of DOM manipulation.  They can have their own scope and they can be reused, which is one of their most useful properties.</p>

<p>In some ways we are all still fighting our way towards manifesting in reality the Platonic ideal of what directives represent, e.g. I should never have to rewrite a calendar widget if it is already existing, I should just be able to use a <code>&lt;calendar&gt;&lt;/calendar&gt;</code> element and set properties to customize it the way that I like.  But in other ways this <em>is</em> approaching reality, especially as Angular grows in popularity and as systems such as Bower become more useful and flexible.</p>

<p>Directives promise no more spaghetti jQuery code (do they deliver?).  Instead, everything gets broken out into modular components that are far easier to test.</p>

<h2>What about Views?</h2>

<p>In a lot of ways the &#8220;view&#8221; is the same as it&#8217;s ever been, modulo directives which we have already discussed.  <code>ngView</code> promises new, snappy navigation, which is exciting.  Views in AngularJS do the same job they always have and they do it well.  Technically I probably should have called this article &#8220;Angular isn&#8217;t MVC, it&#8217;s SDVC&#8221; but I didn&#8217;t think it had the same ring to it.</p>

<h2>Controllers</h2>

<p>Finally we discuss the piece that ties it all together.  The controller.</p>

<p>Without controllers, directives are useless.  Controllers set properties on <code>$scope</code> for directives to use.</p>

<p>Likewise, without controllers, services are useless.  They are just objects for playing with data.  Therefore controllers are like the &#8220;glue&#8221; of your application.</p>

<p>Controllers should be as lean and lightweight as possible.  It makes it easier to see what&#8217;s going on, and it makes it easier to test them.</p>

<h1>Conclusion</h1>

<p>Angular is a new framework and it requires a new way of thinking.  Trying to apply the old patterns, or being inflexible and unwilling to learn about the different components of Angular and how they fit together will get you in trouble.</p>

<p>Everyone likes jQuery because jQuery is a useful tool.  It is simple and it allows you to build whatever you want.  It isn&#8217;t very opinionated about the way you do so (in fact it provides you with a lot of options).</p>

<p>Angular, on the other hand, is like a house.  It already has a framework and a foundation for how to do things, you just have to furnish it.  Trying to use Angular like a hammer will only result in tears.  It is like trying to use a house to build a house.</p>

<p>I hope that this essay may help to clear some things up to people who are new to Angular.</p>

<p>Until next week, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Unit Test Controllers In AngularJS Without Setting Your Hair On Fire]]></title>
    <link href="http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire/"/>
    <updated>2013-12-13T23:03:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2013/12/13/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire</id>
    <content type="html"><![CDATA[<p>Developers almost universally agree that unit tests are a <em>VERY GOOD THING</em> when working on a project.  They help you feel like your code is airtight, ensure reliability in production, and let you refactor with confidence when there is a need to do so.</p>

<p><img src="/images/angularjs-unit-testing/test-code-refactor-cycle.png" title="The Test-Driven Development cycle." ></p>

<p>AngularJS code touts its high degree of <a href="http://angularjs.org/#embed-and-inject">testability</a>, which is a reasonable claim.  In much of the documentation end to end tests are provided with the examples.  Like so many things with Angular, however, I was finding that although unit testing was simple, it was not easy.  Examples were sparse and though the <a href="http://docs.angularjs.org/guide/dev_guide.unit-testing">official documentation</a> provided some snippets of examples, putting it all together in my &#8220;real-world&#8221; case was proving challenging.  So here I&#8217;ve written a little bit about how I ended up getting that wonderful green light for a passing build to show up.</p>

<h1>Instant Karma</h1>

<p><a href="http://karma-runner.github.io/">Karma</a> is a test runner for JavaScript that was created by the Angular team.  It is a very useful tool as it allows you to automate tasks that you would otherwise have to do by hand or with your own cobbled-together collection of scripts (such as re-running your test suite or loading up the dependencies for said tests).  Karma and Angular go together like peanut butter and jelly.</p>

<p>With Karma, you simply define a configuration file, start Karma, and then it will take care of the rest, executing the tests in the browser(s) of your choice to ensure that they work in the environments where you plan on deploying to.  You can specify these browsers in the aforementioned configuration file.  <a href="https://github.com/angular/angular-seed">angular-seed</a>, which I highly recommend, comes with a decent out-of-the-box Karma config that will allow you to hit the ground running quickly.   The Karma configuration in my most recent project looks like this:</p>

<pre><code>module.exports = function(config) {
    config.set({
        basePath: '../',

        files: [
            'app/lib/angular/angular.js',
            'app/lib/angular/angular-*.js',
            'app/js/**/*.js',
            'test/lib/recaptcha/recaptcha_ajax.js',
            'test/lib/angular/angular-mocks.js',
            'test/unit/**/*.js'
        ],

        exclude: [
            'app/lib/angular/angular-loader.js',
            'app/lib/angular/*.min.js',
            'app/lib/angular/angular-scenario.js'
        ],

        autoWatch: true,

        frameworks: ['jasmine'],

        browsers: ['PhantomJS'],

        plugins: [
            'karma-junit-reporter',
            'karma-chrome-launcher',
            'karma-firefox-launcher',
            'karma-jasmine',
            'karma-phantomjs-launcher'
        ],

        junitReporter: {
            outputFile: 'test_out/unit.xml',
            suite: 'unit'
        }

    })
}
</code></pre>

<p>Which is very similar to the default configuration in <a href="https://github.com/angular/angular-seed">angular-seed</a>, except for a few things:</p>

<ul>
<li>I have switched the browser the tests run in from Chrome to <a href="http://phantomjs.org/">PhantomJS</a>, a headless browser, so that they can run without opening a browser window and causing an awkward viewport shuffle in OSX.  Therefore the <code>plugins</code> and <code>browsers</code> settings have been changed.</li>
<li>I added <code>recaptcha_ajax.js</code>, the minified file that Google provides for their Recaptcha service, since my app depends on it being included.  Having this change be as simple as adding a line in the Karma config file was really nice.</li>
</ul>


<p><code>autoWatch</code> is a particularly cool setting, since it will have Karma re-run your tests whenever they, or the files they test, change.</p>

<p>You can install Karma with:</p>

<pre><code>npm install -g karma
</code></pre>

<p><a href="https://github.com/angular/angular-seed">angular-seed</a> provides a handy little script for starting the Karma test runner, which is in <code>scripts/test.sh</code>.  Use it!</p>

<h1>Writing Tests With Jasmine</h1>

<p>Most of the resources available at the time of writing for unit testing with Angular use <a href="http://pivotal.github.io/jasmine/">Jasmine</a>, a behavior-driven development framework for testing JavaScript code.  That&#8217;s what I&#8217;ll be describing here.</p>

<p>To unit test an AngularJS controller, you can take advantage of Angular&#8217;s <a href="http://docs.angularjs.org/guide/di">dependency injection</a> and inject your own version of the services those controllers depend on to control the environment in which the test takes place and also to check that the expected results are occurring.  For example, I have this controller defined in my app to control the highlighting of which tab has been navigated to:</p>

<pre><code>app.controller('NavCtrl', function($scope, $location) {
    $scope.isActive = function(route) {
        return route === $location.path();
    };
})
</code></pre>

<p>If I want to test the <code>isActive</code> function, how do I do so?  I need to ensure that the <code>$location</code> service returns what is expected, and that the output of the function is what is expected.  So in our test spec we have a <code>beforeEach</code> call that gets made that sets up some local variables to hold our (controlled) version of those services, and injects them into the controller so that those are the ones to get used.  Then in our actual test we have assertions that are congruent with our expectations.  It looks like this:</p>

<pre><code>describe('NavCtrl', function() {
    var scope, $location, createController;

    beforeEach(inject(function ($rootScope, $controller _$location_) {
        $location = _$location_;
        scope = $rootScope.$new();

        createController = function() {
            return $controller('NavCtrl', {
                '$scope': scope
            });
        };
    }));

    it('should have a method to check if the path is active', function() {
        var controller = createController();
        $location.path('/about');
        expect($location.path()).toBe('/about');
        expect(scope.isActive('/about')).toBe(true);
        expect(scope.isActive('/contact')).toBe(false);
    });
});
</code></pre>

<p>With this basic structure, you can set up all kinds of stuff.  Since we are providing the controller with our own custom scope to start with, you could do stuff like setting a bunch of properties on it and then running a function you have to clear them, then make assertions that they actually were cleared.</p>

<h1><code>$httpBackend</code> Is Cool</h1>

<p>But what if you are doing stuff like using the <code>$http</code> service to call out to your server to get or post data?  Well, Angular provides a way to mock the server with a thing called <code>$httpBackend</code>.  That way, you can set up expectations for what server calls get made, or just ensure that the response can be controlled so the results of the unit tests can be consistent.</p>

<p>This looks like this:</p>

<pre><code>describe('MainCtrl', function() {
    var scope, httpBackend, createController;

    beforeEach(inject(function($rootScope, $httpBackend, $controller) {
        httpBackend = $httpBackend;
        scope = $rootScope.$new();

        createController = function() {
            return $controller('MainCtrl', {
                '$scope': scope
            });
        };
    }));

    afterEach(function() {
        httpBackend.verifyNoOutstandingExpectation();
        httpBackend.verifyNoOutstandingRequest();
    });

    it('should run the Test to get the link data from the go backend', function() {
        var controller = createController();
        scope.urlToScrape = 'success.com';

        httpBackend.expect('GET', '/slurp?urlToScrape=http:%2F%2Fsuccess.com')
            .respond({
                "success": true,
                "links": ["http://www.google.com", "http://angularjs.org", "http://amazon.com"]
            });

        // have to use $apply to trigger the $digest which will
        // take care of the HTTP request
        scope.$apply(function() {
            scope.runTest();
        });

        expect(scope.parseOriginalUrlStatus).toEqual('calling');

        httpBackend.flush();

        expect(scope.retrievedUrls).toEqual(["http://www.google.com", "http://angularjs.org", "http://amazon.com"]);
        expect(scope.parseOriginalUrlStatus).toEqual('waiting');
        expect(scope.doneScrapingOriginalUrl).toEqual(true);
    });
});
</code></pre>

<p>As you can see, the <code>beforeEach</code> call is very similar, with the only exception being we are getting <code>$httpBackend</code> from the injector rather than <code>$http</code>.  However, there are a few notable differences with how we set up the other test.  For starters, there is an <code>afterEach</code> call that ensures <code>$httpBackend</code> doesn&#8217;t have any outstanding expecations or requests after each test has been run.  And if you look at the way the test is set up and utilizes <code>$httpBackend</code>, there are a few things that are not exactly intuitive.</p>

<p>The actual call to <code>$httpBackend.expect</code> is fairly self-explanatory, but it is not in itself enough- we have to wrap our call to <code>$scope.runTest</code>, the function we are actually testing in this case, in a function that we pass to <code>$scope.$apply</code>, so that we can trigger the <code>$digest</code> which will actually take care of the HTTP request.  And as you can see, the HTTP request to <code>$httpBackend</code> will not resolve until we call <code>$httpBackend.flush()</code>, so this allows us to test what things should be like when the call is in progress but hasn&#8217;t returned yet (in the example above, the controller&#8217;s <code>$scope.parseOriginalUrlStatus</code> property will be set to <code>'calling'</code> so we can display an in-progress spinny).</p>

<p>The next few lines are assertions about properties on <code>$scope</code> that will change after the call resolves.  Pretty cool, eh?</p>

<p><em>NOTE:</em> In some places users have made it convention to have <code>scope</code> without the dollar sign when it is referenced as a var in setting up unit tests.  This doesn&#8217;t seem to be enforced or emphasized particularly strongly by the Angular docs and I find it a little bit more consistent / readable to just use <code>$scope</code> like you do everywhere else, so that&#8217;s how I&#8217;ve done things here.</p>

<h1>Conclusion</h1>

<p>Maybe this is one of those things that others just take to a bit more naturally than I do, but learning to write unit tests in Angular was pretty painful for me in the beginning.  I found my understanding of how to do so to be mostly cobbled together from various blog posts and sources around the Internet, with no real consistency or definitive best practice other than that established by natural selection.  I wanted to provide some documentation of what I eventually came up with to help other people who might be in a tight spot, and just want to get coding instead of having to learn all of the quirks and idiosyncracies of Angular and Jasmine.  So I hope this article has been of use to you.</p>

<p>Unit next week, stay sassy Internet.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Fear Directives In AngularJS]]></title>
    <link href="http://nathanleclaire.com/blog/2013/12/07/dont-fear-directives-in-angular-js/"/>
    <updated>2013-12-07T12:41:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2013/12/07/dont-fear-directives-in-angular-js</id>
    <content type="html"><![CDATA[<p><img src="/images/directivefear/anghero.jpeg" title="Superheroic." ></p>

<h1>Direct what?</h1>

<p>As I mentioned in <a href="http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-dot-js/">last week&#8217;s article</a> I have been working with <a href="http://angularjs.org/">AngularJS</a> for personal projects lately.  This was largely the result of me, approximately six or seven months ago, feeling like I was missing out on the new hotness by not knowing a client-side MV* framework.  I looked around at a lot of options, including:</p>

<ul>
<li><a href="http://backbonejs.org/">Backbone.js</a> (A crowd favorite, with rock-solid online support/documentation/tutorials)</li>
<li><a href="http://emberjs.com/">Ember.js</a></li>
<li><a href="http://knockoutjs.com/">Knockout.js</a></li>
</ul>


<p>Ultimately I fell into learning Angular for a variety of reasons.  Partially it was because I went to a &#8220;Coffee Shop Coders&#8221; presentation where the presenter (<a href="http://www.tauruscolvin.com/">Taurus Colvin</a> - a very friendly dude) explained the basics and impressed me with the possibilities the framework offers.  Maybe it was because I tried to bootstrap a simple Ember project and couldn&#8217;t get anything working.  I don&#8217;t know if it was the documentation, the learning curve, my own shortcomings, or all three, but something about Ember didn&#8217;t click with me.  My choice of Angular was also at least somewhat because I was seduced by <a href="http://yeoman.io/">Yeoman</a> (which, at the time of writing, uses an Angular generator in its usage example) around the time I attempted my first Angular app.  It was a foray which went down in flames, largely because I was so hesitant to make my own directives and services.</p>

<h1>$scope Creep</h1>

<p>One day after I had started getting interested in Angular I mentioned to a coworker that I was developing an app with the framework.</p>

<p>&#8220;Oh yeah,&#8221; he said, &#8220;I watched a presentation about making directives - seems to be where the real power of it is.&#8221;</p>

<p>Since I knew that the funny attributes Angular introduces such as <code>ng-show</code>, <code>ng-class</code>, and <code>ng-repeat</code> were directives, I had a feeling he was onto something.  However, I was a little bit too timid to actually tackle making my own.  After all, directives were something that smart people made, not me.  I&#8217;d have to understand that difficult link/compile stuff, right?  Remember, this was April of 2013 and, though it seems silly to say since at the time of writing only eight months have passed, the quality of documentation, tutorials, and examples for AngularJS was not as good as it is today.  I think <a href="http://egghead.io">egghead.io</a> (an excellent Angular resource if you&#8217;re not aware) was just getting off the ground, but I certianly hadn&#8217;t heard of it.</p>

<p>Less so through concious decision and more so through my own hesitance to learn something I was irrationally afraid of, I began slipping into the trap of creating a tangled mess that stuffed everything possible into <code>$scope</code>, used <code>ng-include</code> when I could have used directives, and relied on <code>$broadcast</code>ing down from <code>$rootScope</code> when I could have used services.</p>

<p>I was a fool.</p>

<h1>How Not To Fear The Directive</h1>

<p>If I could go back and stop myself from making a whole bunch of mistakes in that app, I would have started with explaining that a directive is just a simple little reusable component for describing the way HTML should behave.  The Angular docs try to harp on this but inevitably they make it seem obtuse and complicated.  <em>Note:  Though they could be better I don&#8217;t think it&#8217;s cool to hate on the Angular docs.  They&#8217;ve gotten way better even in the short time I&#8217;ve been using the framework.</em></p>

<p>In my opinion it&#8217;s a very useful tool because it allows you to encapsulate functionality in a semantic way that will (hopefully) make sense to anyone looking at your markup, and keep your functionality well &#8220;chunked&#8221; so that you can keep track of what is happening where instead of dealing with things mutating globally (which most of us hopefully know by now is bad news).</p>

<p>Ever had this happen with jQuery? You need to do some JavaScript magic with a particular element on the page, and so you give it some arbitrary <code>id</code> so you can access it with <code>$('element#id')</code>.  Now you get to write a bunch of JavaScript that listens for the relevant events, checks the element&#8217;s state to see that it is congruent with our expectations, modify its class to change how it is displayed, and so on.  It starts out as a few simple functions using a very powerful tool that soon grows into a complicated mess of callbacks, weird looking selectors, and re-render functions.  It may be strewn across several files with no rhyme or reason.</p>

<p>Not only is it no fun, it makes it very hard for your designer friends to look at your markup and know what the expected behavior for that HTML is.  So, Angular provides us with directives, which are actually pretty simple to create.  So don&#8217;t be scared of them like I was.  You just have to create an Angular app:</p>

<pre><code class="js">var myApp = angular.module('myApp', []);
</code></pre>

<p>Then attach a simple directive:</p>

<pre><code class="js">myApp.directive('myDirective', function() {
    return {
        restrict: 'E',
        template: '&lt;h1&gt;I made a directive!&lt;/h1&gt;'
    };
});
</code></pre>

<p>That&#8217;s all, you just created a directive!  Now, when you go looking around for some examples of directives online, it&#8217;s easy to get lost in all of the Angular-specific jargon like linking functions, the &#8220;restrict&#8221; property, scope hierarchies and so on.  But I highly recommend that you try not to panic, and realize that there is meaning behind all of the weird symbols and abbreviations you see.  For instance, in the definition for the directive above, I define a <code>restrict: 'E'</code> setting.  What the heck does that mean?</p>

<p>Well, what it means is, &#8220;restrict the usage of this directive to only Elements&#8221;.</p>

<p>So, you can use it in HTML like this:</p>

<pre><code class="js">&lt;body ng-app="myApp"&gt;
    &lt;myDirective&gt;&lt;/myDirective&gt;
&lt;/body&gt;
</code></pre>

<p>But not like this:</p>

<pre><code class="js">&lt;body ng-app="myApp"&gt;
    &lt;span my-directive&gt;&lt;/span&gt;
&lt;/body&gt;
</code></pre>

<p>(Angular &#8220;normalizes&#8221; the <code>hyphen-usage-attribute</code> to <code>camelCase</code> as part of their normalization process for directives - see the <a href="http://docs.angularjs.org/guide/directive">documentation</a>).</p>

<h1>Why is it useful?</h1>

<p>So, other than providing a convenient way to make little repeatable bits of HTML that have their own names, why is this useful?</p>

<p>Well, by default every directive inherits the parent scope but it is also possible for a directive to have its own <a href="http://www.thinkster.io/pick/KnxWvHUW64/angularjs-understanding-isolate-scope">isolate scope</a>.  What this means is, it can have its own little properties that it sets on its own unique <code>$scope</code> that won&#8217;t mess around with any of the other properties that you are setting in the rest of your app.  Especially if you are going to use the component in multiple places, or have it in a <code>ng-repeat</code>, this is incredibly useful.  It allows you to break things down into much more modular components than using some giant <code>BigBallOfMudController</code> (or several <code>BigBallOfMudController</code>s) to control the state of your app (which is usually the essence of what ends up happening in the &#8220;traditional jQuery&#8221; mess described above).  Instead, each directive is responsible for its own data and it works on it in isolation from the other directives.  In Angular this antipattern would look something like having a big array of objects in a central Controller, and updating individual properties of those objects in that controller instead of having a directive to modularize that kind of operation.</p>

<p>Check out this example, where I created a <code>gear</code> directive using <a href="http://fontawesome.io/">Font Awesome</a>&#8217;s spinning gear icon.  The end result is a lot more flexible than an attempt at creating this using jQuery, or vanilla JavaScript.  Each gear keeps track of whether it is currently spinning or not in the new shared scope automagically created by the ngRepeat directive, so they spin or remain stationary indepent of each other.  However, they are all influenced equally by the <code>ng-model</code> properties of the parent scope.</p>

<p>Writing a <code>link</code> function provides even more power and flexibility, but that&#8217;s a little outside the scope of this article.  Perhaps another time.</p>

<iframe src="http://embed.plnkr.co/i2StmWcxKNZCQb0YtYp0/preview"></iframe>


<h1>Conclusion</h1>

<p>Enjoy your directives, kids, and never ever be scared of them.  <a href="http://misko.hevery.com/">Miško</a>&#8217;s been up late at night so you can experience HTML as it could have been.</p>

<p>On a more serious/philosophical note, I wanted to close with a thought that I have that creating your own directives reminds me a bit of <a href="http://en.wikipedia.org/wiki/Metcalfe's_law">Metcalfe&#8217;s Law</a> (by analogy of course).  Each directive that gets created increases the power and usefulness of all the other directives.  An Angular in which <code>ng-repeat</code> exists, for instance, is so much more powerful than one in which it doesn&#8217;t.  So, remember that they can be stacked and it makes your webapp that much better.</p>

<p>Until next time, stay sassy Internet.</p>

<p>Cheers,</p>

<p>Nathan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fear and Loathing With Golang and AngularJS]]></title>
    <link href="http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-js/"/>
    <updated>2013-11-30T14:40:00+00:00</updated>
    <id>http://nathanleclaire.com/blog/2013/11/30/fear-and-loathing-with-golang-and-angular-js</id>
    <content type="html"><![CDATA[<p><img src="/images/fearandloathing/fearandloathingwithgolangular.jpeg" title="Complete and utter hyperbole." ></p>

<p>Recently I&#8217;ve been building an app to check a web page for broken links using <a href="http://golang.org">Golang</a> and <a href="http://angularjs.org">AngularJS</a> (it&#8217;s for use with this blog, actually, as well as general public consumption).  It&#8217;s pretty close to being done, except for a contact form which will allow people to send an e-mail directly to me (which has involved all manner of fun with Go&#8217;s <a href="http://golang.org/pkg/net/smtp/">smtp</a> library and will most likely be the subject of a future blog post) to make suggestions, send comments, flame me for creating a free tool for them to use, etc.  Though I am generally a huge fan of both of these technologies, I was tearing my hair out over a particular issue which turned out to be solvable by reading the Go source code.  This coincided with the timing of my weekly blog article.  So here I am sharing my frustration and catharsis with you, dear readers.</p>

<h1>What&#8217;s the rub?</h1>

<p>The rub has to do with the way that Angular sends HTTP POST requests, the way that Golang handles them, and how these two interact.</p>

<p>In AngularJS when we want to perform business logic (for example, calling out to a server to get some data to display ) we put that logic inside of a controller.  The controller sets properties on Angular&#8217;s <code>$scope</code> variable that are accessible from the front end, and vice versa, providing us with two-way data binding.  If you want to make an AJAX call, you inject Angular&#8217;s <code>$http</code> service (by passing it into the function where the controller is defined) and use it.  This is a little bit of a change from what most people are used to, which is usually something like <code>jQuery.ajax</code>, but it&#8217;s not too unfamiliar.  Since Angular likes you to play exclusively in Anglar-land (in controllers at least), they provide you with this service to make sure that no funny business happens to interfere with Angular&#8217;s apply-digest cycle.  The syntax is fairly straightforward and looks like this:</p>

<pre><code class="js">function MainCtrl($scope, $http) {
    $http.get('/login', {
        username: $scope.user,
        password: $scope.password,
    })
    .success(function(data, status, headers, config) {
        $scope.userLoggedIn = data.isLoginValid;
    })
    .error(function(err, status, headers, config) {
        console.log("Well, this is embarassing.");
    });
}
</code></pre>

<p>This works extremely well with GET requests, so one would expect it to work equally well with POST requests, right?  Maybe.  I had a use case where I was trying to submit form data through <code>$http.post</code> and things were acting extremely funny.  No matter what I tried, it seemed that I could not retrieve anything on the back end, which in this case is written in Go.</p>

<p>Normally in Go you can just call <code>request.ParseForm()</code> in the function that handles HTTP requests for the URI a form gets submitted to, and then the values you are interested in are accessible through <code>request.FormValue("fieldName")</code> calls (<code>request.FormValue</code> will automatically call <code>request.ParseForm</code> for you if needed).  Normally it works smooth as silk- so you can imagine my surprise when I couldn&#8217;t for the life of me pull data out of the HTTP requests I was POSTing with Angular from my makeshift form.  I even upgraded my Go installation to 1.1.2, and still got nothing.  My code was something along the lines of this:</p>

<pre><code>func emailHandler(w http.ResponseWriter, r *http.Request) {
    var err error
    response := map[string]interface{} {
        "success": true,
    }
    err = r.ParseForm()
    if err != nil {
        log.Print("error parsing form ", err)
        response["success"] = false
    }
    name := r.FormValue("yourName")
    email := r.FormValue("yourEmail")
    feedback := r.FormValue("feedback")
    go sendMail(name, email, feedback)
    jsonResponse, err = json.Marshal(response)
    if err != nil {
        log.Print(err)
    }
    w.Write(jsonResponse)
}
</code></pre>

<h1>So what gives?</h1>

<p>Some Googling made me painfully aware that I was not the only one with an issue like this:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/17547227/angular-js-post-request-not-sending-json-data">Angular JS POST request not sending JSON data</a></li>
<li><a href="http://stackoverflow.com/questions/11442632/how-can-i-make-angular-js-post-data-as-form-data-instead-of-a-request-payload">How can I make angular.js post data as form data instead of a request payload?</a></li>
<li><a href="https://groups.google.com/forum/#!msg/angular/5nAedJ1LyO0/4Vj_72EZcDsJ">How to post application/x-www-form-encoded?</a></li>
<li><a href="http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/">Make AngularJS $http service behave like jQuery.ajax()</a> (a good blog article detailing this problem)</li>
</ul>


<p>Most StackOverflow answers suggested modifying stuff in Angular to get this to work (since there&#8217;s not much you can do about stuff not showing up in <code>$_POST</code> in PHP, for example), but this left me dissatisfied.  As Ezekiel Victor points out in the aforementioned blog article:</p>

<blockquote>
    The difference is in how jQuery and AngularJS serialize and transmit the data. Fundamentally, the problem lies with your server language of choice being unable to understand AngularJS’s transmission natively—that’s a darn shame because AngularJS is certainly not doing anything wrong. By default, jQuery transmits data using <code>Content-Type: x-www-form-urlencoded</code> and the familiar <code>foo=bar&baz=moe</code> serialization. AngularJS, however, transmits data using <code>Content-Type: application/json</code> and <code>{ "foo": "bar", "baz": "moe" }</code> JSON serialization, which unfortunately some Web server languages—notably PHP—do not unserialize natively.
</blockquote>


<p>After poring over the documentation for Go&#8217;s <code>http.Request</code> I was still stumped on how to make a basic <code>$http.post</code> call work in Go without modifying something on the client side.  <code>request.Body</code> didn&#8217;t seem to have anything useful, and calls to <code>request.FormValue</code> were definitely not working.  The server, however, was definitely receiving a JSON payload, as dumping the request made clear (I&#8217;ve removed the <code>*/*</code> value from the <code>Accept</code> header so the request will play nice with the auto-pretty-printing of my blog):</p>

<pre><code>POST /email HTTP/1.1
Host: localhost:8000
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36
Content-Length: 68
Accept: application/json, text/plain
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Connection: keep-alive
Content-Type: application/json;charset=UTF-8
Origin: http://localhost:8000
Referer: http://localhost:8000/

{"yourName":"John","yourEmail":"John.Smith@gmail.com","feedback":"I really like your new webapp!"}
</code></pre>

<h1>Let&#8217;s Go Digging In The request.go Source!</h1>

<p>Not being able to receive the values with <code>request.FormValue</code> was one thing, but I also could not successfully deserialize the JSON payload into a Go struct- the payload was seemingly nowhere to be found in the <code>Request</code> struct provided to my handler.  I could not believe that the Go language designers, who are otherwise very meticulous and reliable, had overlooked something like <code>Content-Type: application/json</code> handling.  But checking out the source for <code>Request.ParseForm</code> and <code>Request.parsePostForm</code> led me to my &#8220;aha&#8221; moment.  The source for <code>Request.ParseForm</code> (from <a href="http://golang.org/src/pkg/net/http/request.go?m=text&amp;ModPagespeed=noscript">golang.org</a>):</p>

<pre><code>// ParseForm parses the raw query from the URL and updates r.Form.
//
// For POST or PUT requests, it also parses the request body as a form and
// put the results into both r.PostForm and r.Form.
// POST and PUT body parameters take precedence over URL query string values
// in r.Form.
//
// If the request Body's size has not already been limited by MaxBytesReader,
// the size is capped at 10MB.
//
// ParseMultipartForm calls ParseForm automatically.
// It is idempotent.
func (r *Request) ParseForm() error {
    var err error
    if r.PostForm == nil {
        if r.Method == "POST" || r.Method == "PUT" {
            r.PostForm, err = parsePostForm(r)
        }
        if r.PostForm == nil {
            r.PostForm = make(url.Values)
        }
    }
    if r.Form == nil {
        if len(r.PostForm) &gt; 0 {
            r.Form = make(url.Values)
            copyValues(r.Form, r.PostForm)
        }
        var newValues url.Values
        if r.URL != nil {
            var e error
            newValues, e = url.ParseQuery(r.URL.RawQuery)
            if err == nil {
                err = e
            }
        }
        if newValues == nil {
            newValues = make(url.Values)
        }
        if r.Form == nil {
            r.Form = newValues
        } else {
            copyValues(r.Form, newValues)
        }
    }
    return err
}
</code></pre>

<p>The relevant bit for us is that call to <code>parsePostForm</code> if <code>r.Method</code> is <code>"POST"</code> (since it is in our case).  The code for <code>parsePostForm</code>:</p>

<pre><code>func parsePostForm(r *Request) (vs url.Values, err error) {
    if r.Body == nil {
        err = errors.New("missing form body")
        return
    }
    ct := r.Header.Get("Content-Type")
    ct, _, err = mime.ParseMediaType(ct)
    switch {
    case ct == "application/x-www-form-urlencoded":
        var reader io.Reader = r.Body
        maxFormSize := int64(1&lt;&lt;63 - 1)
        if _, ok := r.Body.(*maxBytesReader); !ok {
            maxFormSize = int64(10 &lt;&lt; 20) // 10 MB is a lot of text.
            reader = io.LimitReader(r.Body, maxFormSize+1)
        }
        b, e := ioutil.ReadAll(reader)
        if e != nil {
            if err == nil {
                err = e
            }
            break
        }
        if int64(len(b)) &gt; maxFormSize {
            err = errors.New("http: POST too large")
            return
        }
        vs, e = url.ParseQuery(string(b))
        if err == nil {
            err = e
        }
    case ct == "multipart/form-data":
        // handled by ParseMultipartForm (which is calling us, or should be)
        // TODO(bradfitz): there are too many possible
        // orders to call too many functions here.
        // Clean this up and write more tests.
        // request_test.go contains the start of this,
        // in TestRequestMultipartCallOrder.
    }
    return
}
</code></pre>

<p>Initially I thought that the source code for this function might need to be modified to add another case to the switch block to handle the case where the content type is <code>application/json</code>, but then I had a moment of insight.</p>

<p>I shouldn&#8217;t be trying to parse a form at all!  Cue facepalm, and guilt of hours spent solving this issue (at least I&#8217;ll know better next time).  My request payload wasn&#8217;t encoded as a form, it was encoded as JSON.  If I just took out the call to <code>request.ParseForm</code>, I probably would have usable data in <code>request.Body</code> that I could <code>Demarshal</code>.  Indeed, this proved to be the case.</p>

<h1>Conclusion</h1>

<p>It seems that the issue in this case was mostly <a href="http://en.wikipedia.org/wiki/User_error">PEBKAC</a> (naturally).  I think that <code>ParseForm</code> is doing the right thing not handling requests with <code>Content-Type: application/json</code> in <code>ParseForm</code> (since they&#8217;re not really form submissions), but it would be nice if there were some kind of API to handle this directly from the <code>Request</code> (though the JSON deserialization functions provided by <code>encoding/json</code> work really well), or this was better documented in some place (partially why I wanted to write this article).  I&#8217;d be curious to talk to some of the Go language maintainers about this, and may shoot an e-mail around.</p>

<p>At any rate, it definitely goes to show that a knowledge of HTTP basics is helpful, as I was equating form submissions with POST requests like a newbie.  Perhaps there&#8217;s been too much developing for me over this Thanksgiving weekend :)</p>

<p>Originally I monkey patched a fix in Angular&#8217;s <code>$httpProvider</code> config to work around this issue.  However, removing the call to <code>ParseForm</code> from my server side code seems to be a much cleaner solution.  Now my Go program can accept Angular POST requests like a charm.</p>

<p>Thanks for reading, and I&#8217;ll catch you next week.</p>

<ul>
<li>Nathan</li>
</ul>

]]></content>
  </entry>
  
</feed>
